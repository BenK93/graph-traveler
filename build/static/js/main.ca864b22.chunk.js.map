{"version":3,"sources":["logic/maze/Random.js","logic/AlgorithmManager.js","logic/maze/DFS.js","logic/solvers/BFS.js","logic/solvers/DFS.js","logic/GraphLogic.js","logic/redux/reducers/reducers.js","logic/redux/graphSlice.js","components/TopMenu/SolveControl.js","components/TopMenu/GeneratorControl.js","components/GraphArea/Tile.js","components/TopMenu/TopMenu.js","components/GraphArea/GraphArea.js","components/ControlsMenu/ControlsMenu.js","App.js","logic/redux/store.js","index.js"],"names":["generators","Random","graphData","generationData","start","goal","vertices","deltaWalls","forEach","v","Math","random","push","running","deltaHoles","DFS","walls","firstRun","queue","neighbors","filteredNeighbors","currentHead","length","shift","filter","n","data","includes","sort","a","b","solvers","BFS","graphState","edges","visited","parentDict","tmpQueue","currentVertex","pop","goalNode","indexOf","updatedQueue","getMazeGenerators","names","getSolverNames","generateGraph","nx","ny","r","c","id","undefined","removeEdge","e","node","restoreEdge","step","state","paused","drawPath","pathTile","type","res","f","algorithms","solve","current","placeStart","action","payload","oldVal","placeEnd","GraphData","placeNode","generate","extraParams","setIntervalId","value","intervalId","pause","reset","resume","clear","updateSpeed","solveSpeed","wallATile","removeAWall","setAlgorithm","algorithmDict","generateMaze","w","updateGraph","randomStart","floor","graphSlice","createSlice","name","initialState","end","solveArr","reducers","graphReducer","actions","SolveControl","props","selectedSolver","useSelector","graph","runSpeed","runSolver","oldTimeout","dispatch","useDispatch","delay","clearInterval","setInterval","solveHelper","className","FormControl","variant","InputLabel","Select","label","onChange","target","map","MenuItem","key","Button","color","onClick","currentGenerator","runGenerator","generateHelper","getCurrentCSS","cls","toggleWall","Tile","cellState","styles","width","height","style","onMouseEnter","buttons","onPointerDown","GeneratorControl","GraphArea","updateSizes","graphArea","document","getElementById","graphW","clientWidth","graphH","clientHeight","columns","TILE","rows","tileW","tileH","setState","onLoad","getTiles","tiles","cells","this","Component","connect","vertex","Typography","gutterBottom","Slider","onChangeCommitted","defaultValue","min","max","aria-labelledby","valueLabelDisplay","valueLabelFormat","marks","App","configureStore","reducer","middleware","getDefaultMiddleware","immutableCheck","serializableCheck","ReactDOM","render","StrictMode","store"],"mappings":"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","file":"static/js/main.ca864b22.chunk.js","sourcesContent":["export default function (graphData, generationData) {\r\n  let { start, goal, vertices } = graphData;\r\n  let deltaWalls = [],\r\n    deltaHoles = [];\r\n  vertices.forEach((v) => {\r\n    if (Math.random() > 0.7 && v !== start && v !== goal) deltaWalls.push(v);\r\n  });\r\n  return { running: false, deltaHoles, deltaWalls, generationData };\r\n}\r\n","import BFS from \"./solvers/BFS\";\r\nimport DFS from \"./solvers/DFS\";\r\nimport Random from \"./maze/Random\";\r\nimport DFSGenerate from \"./maze/DFS\";\r\n// import Recursive from \"./maze/Recursive\";\r\n\r\nconst generators = { Random, DFS: DFSGenerate };\r\n\r\nconst solvers = {\r\n  BFS,\r\n  DFS,\r\n};\r\n\r\nfunction getMazeGenerators() {\r\n  let names = [];\r\n  for (let n in generators) names.push(n);\r\n  return names;\r\n}\r\n\r\nfunction getSolverNames() {\r\n  let names = [];\r\n  for (let n in solvers) names.push(n);\r\n  return names;\r\n}\r\n\r\nexport { getMazeGenerators, getSolverNames, solvers, generators };\r\n","export default function (graphData, generationData) {\r\n  let { start, goal, vertices, walls } = graphData;\r\n  let { firstRun, queue, running } = generationData;\r\n  let deltaWalls = [];\r\n  let deltaHoles = [];\r\n  if (firstRun) {\r\n    vertices.forEach((v) => {\r\n      if (v !== start && v !== goal) deltaWalls.push(v);\r\n    });\r\n    generationData.firstRun = false;\r\n    generationData.queue = [start];\r\n  } else {\r\n    let neighbors, filteredNeighbors, currentHead;\r\n    do {\r\n      if (queue.length === 0) return { running: false, deltaWalls: [], deltaHoles: [], generationData };\r\n      currentHead = queue.shift();\r\n      walls = walls.filter((n) => n !== currentHead);\r\n      neighbors = graphData.data[currentHead].neighbors;\r\n      filteredNeighbors = neighbors.filter((n) => walls.includes(n));\r\n    } while (neighbors.length - filteredNeighbors.length > 1 && !neighbors.includes(goal));\r\n\r\n    neighbors.sort((a, b) => 0.75 - Math.random()); //randomize the DFS but not too much\r\n    queue = [...neighbors, ...queue.filter((n) => !neighbors.includes(n))];\r\n    deltaHoles = [...deltaHoles, currentHead];\r\n    generationData = { ...generationData, queue };\r\n  }\r\n  return { running, deltaHoles, deltaWalls, generationData };\r\n}\r\n","export default function BFS(graphState) {\r\n  let { edges, queue, visited, parentDict, running, goal } = graphState;\r\n  if (queue.length === 0) return graphState; // if no path\r\n  let tmpQueue = [...queue]; // every step will include all the level nodes\r\n  queue = [];\r\n  while (tmpQueue.length > 0) {\r\n    let currentVertex = tmpQueue.pop(); //get the next one (fifo)\r\n    // let currentVertex = queue.pop(); //get the next one (fifo)\r\n    let neighbors = edges[currentVertex];\r\n    neighbors = neighbors.filter((v) => !visited.includes(v) && !queue.includes(v));\r\n    neighbors.forEach((v) => (parentDict[v] = currentVertex));\r\n    queue = [...neighbors, ...queue];\r\n    visited.push(currentVertex);\r\n    if (neighbors.includes(goal)) {\r\n      let goalNode = neighbors[neighbors.indexOf(goal)];\r\n      parentDict[goalNode] = currentVertex;\r\n      running = false;\r\n    }\r\n  }\r\n  return { edges, queue, visited, parentDict, running, goal };\r\n}\r\n","export default function DFS(graphState) {\r\n  let { edges, queue, visited, parentDict, running, goal } = graphState;\r\n  if (queue.length === 0) return { ...graphState, running: false }; // if no path\r\n  let currentVertex = queue.shift(); //get the next one (lifo)\r\n  let neighbors = edges[currentVertex];\r\n  neighbors = neighbors.filter((v) => !visited.includes(v));\r\n  let updatedQueue = neighbors.filter((v) => queue.includes(v));\r\n  if (updatedQueue.length > 0) queue = queue.filter((v) => !updatedQueue.includes(v)); //make room for the updated nodes\r\n  neighbors.forEach((v) => (parentDict[v] = currentVertex));\r\n\r\n  queue = [...neighbors, ...queue];\r\n  visited.push(currentVertex);\r\n  if (neighbors.includes(goal)) {\r\n    let goalNode = neighbors[neighbors.indexOf(goal)];\r\n    parentDict[goalNode] = currentVertex;\r\n    running = false;\r\n  }\r\n  return { edges, queue, visited, parentDict, running, goal };\r\n}\r\n","function generateGraph(nx, ny) {\r\n  let vertices = [];\r\n  let edges = {};\r\n  for (let r = 0; r < ny; r++)\r\n    for (let c = 0; c < nx; c++) {\r\n      let id = nx * r + c;\r\n      vertices.push(id); //Add ID first\r\n      if (edges[id] === undefined) edges[id] = [];\r\n      if (id - 1 >= 0 && (id - 1) % nx <= id % nx) {\r\n        edges[id].push(id - 1);\r\n        edges[id - 1].push(id);\r\n      }\r\n      if (id - nx >= 0) {\r\n        edges[id].push(id - nx);\r\n        edges[id - nx].push(id);\r\n      }\r\n    }\r\n\r\n  return { vertices, edges };\r\n}\r\n\r\nconst removeEdge = (e, node) => {\r\n  let edges = { ...e };\r\n  let neighbors = edges[node];\r\n  neighbors.forEach((n) => {\r\n    edges[n] = edges[n].filter((v) => v !== node);\r\n  });\r\n  edges[node] = [];\r\n  return edges;\r\n};\r\n\r\nconst restoreEdge = (e, neighbors, walls, node) => {\r\n  let edges = { ...e };\r\n\r\n  neighbors.forEach((n) => {\r\n    if (!walls.includes(n)) edges[n] = [...edges[n], node];\r\n  });\r\n  edges[node] = [...neighbors.filter((n) => !walls.includes(n))];\r\n  return edges;\r\n};\r\n\r\nexport { generateGraph, removeEdge, restoreEdge };\r\n","/*\r\n    graphData: {\r\n      vertices: [],\r\n      edges: [],\r\n      data: {},\r\n      parentDict: {},\r\n      visited: [],\r\n      queue: [],\r\n      goal: -1,\r\n      running: false,\r\n    },\r\n    solveSpeed: 200,\r\n    wall: [],\r\n    start: 128,\r\n    end: -1,\r\n    algorithms: {\r\n      solve: getSolverNames()[0],\r\n      generate: undefined,\r\n      solveArr: getSolverNames(),\r\n    },\r\n  },\r\n*/\r\n\r\nimport { solvers, generators } from \"../../AlgorithmManager\";\r\nimport { removeEdge, restoreEdge } from \"../../GraphLogic\";\r\nexport default {\r\n  step: (state) => {\r\n    if (state.paused) return;\r\n    if (state.graphData.queue.length === 0) state.graphData.running = false;\r\n    //draw path at the end\r\n    if (state.graphData.drawPath) {\r\n      if (state.graphData.queue.length > 0) {\r\n        let pathTile = state.graphData.queue.pop();\r\n        if (state.graphData.data[pathTile].type === \"visited\") state.graphData.data[pathTile].type = \"path\";\r\n      }\r\n      return;\r\n    }\r\n    ///////////////////////\r\n    let f = solvers[state.algorithms.solve];\r\n    let res = f(state.graphData);\r\n\r\n    if (!res.running) res = { ...res, running: true, drawPath: true };\r\n    state.graphData = { ...state.graphData, ...res };\r\n    // when search is finished//////////\r\n    if (res.drawPath) {\r\n      state.graphData.queue = []; //empty it and it will be repurposed for the path\r\n      if (state.graphData.goal !== -1 && state.graphData.parentDict[state.graphData.goal] !== undefined) {\r\n        let current = state.graphData.goal;\r\n        while (state.graphData.parentDict[current] !== undefined) {\r\n          state.graphData.queue = [...state.graphData.queue, current];\r\n          current = state.graphData.parentDict[current];\r\n        }\r\n      }\r\n    }\r\n    /////////////////////\r\n    //change each cell type to visited if visited (duplication will not affect performance)\r\n    state.graphData.visited.forEach((v) => {\r\n      if (state.graphData.data[v].type === \"\") state.graphData.data[v].type = \"visited\";\r\n    });\r\n  },\r\n\r\n  placeStart: (state, action) => {\r\n    let id = action.payload;\r\n    let oldVal = state.graphData.data[id];\r\n    state.graphData.start = id;\r\n    state.graphData.data[id] = { ...oldVal, type: \"start\" };\r\n  },\r\n\r\n  placeEnd: (state, action) => {\r\n    let id = action.payload;\r\n    let oldVal = state.graphData.data[id];\r\n    state.GraphData.goal = id;\r\n    state.graphData.data[id] = { ...oldVal, type: \"end\" };\r\n  },\r\n  placeNode: (state, action) => {\r\n    let { type, id } = action.payload.id;\r\n    let oldVal = state.graphData.data[id];\r\n    state[type] = id;\r\n    state.graphData.data[id] = { ...oldVal, type };\r\n  },\r\n\r\n  solve: (state) => {\r\n    state.graphData.running = true;\r\n  },\r\n  generate: (state) => {\r\n    state.generationData = { extraParams: {}, running: true, firstRun: true, queue: [state.graphData.start] };\r\n  },\r\n  setIntervalId: (state, action) => {\r\n    let { type, value } = action.payload;\r\n    state.intervalId[type] = value;\r\n  },\r\n  pause: (state) => {\r\n    state.paused = true;\r\n  },\r\n  reset: (state) => {\r\n    state.graphData.vertices.forEach((v) => {\r\n      let { type } = state.graphData.data[v];\r\n      if (type !== \"start\" && type !== \"end\" && type !== \"wall\")\r\n        state.graphData.data[v] = { ...state.graphData.data[v], type: \"\" };\r\n    });\r\n    state.graphData = {\r\n      ...state.graphData,\r\n      running: false,\r\n      drawPath: false,\r\n      queue: [state.graphData.start],\r\n      visited: [],\r\n      parentDict: [],\r\n    };\r\n    state.paused = false;\r\n  },\r\n  resume: (state) => {\r\n    state.paused = false;\r\n  },\r\n  clear: (state) => {\r\n    state.graphData.walls = []\r\n    state.graphData.vertices.forEach((v) => {\r\n      state.graphData.edges[v] = state.graphData.data[v].neighbors;\r\n      if (state.graphData.data[v].type !== \"start\" && state.graphData.data[v].type !== \"end\") state.graphData.data[v].type = \"\";\r\n    });\r\n  },\r\n  updateSpeed: (state, action) => {\r\n    state.solveSpeed = action.payload;\r\n  },\r\n  wallATile: (state, action) => {\r\n    let { type } = state.graphData.data[action.payload];\r\n    if (type !== \"\" || state.graphData.walls.includes(action.payload)) return;\r\n    state.graphData.walls.push(action.payload);\r\n    state.graphData.data[action.payload].type = \"wall\";\r\n    state.graphData.edges = { ...removeEdge(state.graphData.edges, action.payload) };\r\n  },\r\n\r\n  removeAWall: (state, action) => {\r\n    let { type, neighbors } = state.graphData.data[action.payload];\r\n    if (type !== \"wall\") return;\r\n    state.graphData.walls = state.graphData.walls.filter((v) => v !== action.payload);\r\n    state.graphData.data[action.payload].type = \"\";\r\n    state.graphData.edges = { ...restoreEdge(state.graphData.edges, neighbors, state.graphData.walls, action.payload) };\r\n  },\r\n\r\n  setAlgorithm: (state, action) => {\r\n    let { value, type } = action.payload;\r\n    let algorithmDict;\r\n    switch (type) {\r\n      case \"solve\":\r\n        algorithmDict = solvers;\r\n        break;\r\n      default:\r\n        algorithmDict = generators;\r\n    }\r\n    if (algorithmDict[value] !== undefined) state.algorithms[type] = value;\r\n  },\r\n\r\n  generateMaze: (state) => {\r\n    let f = generators[state.algorithms.generate];\r\n    let { deltaWalls, deltaHoles, running, generationData, extraParams } = f(state.graphData, state.generationData);\r\n    state.graphData.walls = [...state.graphData.walls.filter((v) => !deltaHoles.includes(v)), ...deltaWalls];\r\n    deltaWalls.forEach((w) => {\r\n      if (w === state.graphData.start || w === state.graphData.goal) return;\r\n      state.graphData.data[w].type = \"wall\";\r\n      state.graphData.edges = { ...removeEdge(state.graphData.edges, w) };\r\n    });\r\n\r\n    deltaHoles.forEach((n) => {\r\n      if (n === state.graphData.start || n === state.graphData.goal) return;\r\n\r\n      state.graphData.data[n].type = \"\";\r\n      state.graphData.edges = {\r\n        ...restoreEdge(state.graphData.edges, state.graphData.data[n].neighbors, state.graphData.walls, n),\r\n      };\r\n    });\r\n    state.generationData = { ...generationData, running, extraParams };\r\n  },\r\n\r\n  updateGraph: (state, action) => {\r\n    let { vertices, edges } = action.payload;\r\n    state.graphData.vertices = vertices;\r\n    let randomStart = Math.floor(Math.random() * vertices.length); //temp\r\n\r\n    state.graphData.start = randomStart;\r\n    state.graphData.data[randomStart] = { type: \"start\", neighbors: edges[randomStart] };\r\n    state.graphData.queue = [randomStart];\r\n    randomStart = Math.floor(Math.random() * vertices.length); //temp\r\n    state.graphData.goal = randomStart;\r\n    state.graphData.data[randomStart] = { type: \"end\", neighbors: edges[randomStart] };\r\n    state.graphData.goal = randomStart;\r\n    state.graphData.edges = edges;\r\n    vertices.forEach((v) => {\r\n      if (state.graphData.data[v] === undefined) state.graphData.data[v] = { type: \"\", neighbors: edges[v] };\r\n    });\r\n  },\r\n};\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getSolverNames, getMazeGenerators } from \"../AlgorithmManager\";\r\nimport graphReducer from \"./reducers/reducers\";\r\nexport const graphSlice = createSlice({\r\n  name: \"graph\",\r\n  initialState: {\r\n    graphData: {\r\n      vertices: [],\r\n      edges: [],\r\n      data: {},\r\n      parentDict: {},\r\n      visited: [],\r\n      queue: [],\r\n      drawPath: false,\r\n      goal: -1,\r\n      start: -1,\r\n      running: false,\r\n      walls: [],\r\n    },\r\n    generationData: {\r\n      running: false,\r\n      intervalId: undefined,\r\n      queue: [],\r\n      firstRun: true,\r\n      extraParams: {},\r\n    },\r\n    solveSpeed: 200,\r\n    start: 128,\r\n    end: -1,\r\n    paused: false,\r\n    intervalId: {\r\n      solve: undefined,\r\n      generate: undefined,\r\n    },\r\n    algorithms: {\r\n      solve: getSolverNames()[0],\r\n      generate: getMazeGenerators()[0],\r\n      solveArr: getSolverNames(),\r\n    },\r\n  },\r\n  reducers: graphReducer,\r\n});\r\n\r\nexport const {\r\n  step,\r\n  solve,\r\n  generate,\r\n  reset,\r\n  pause,\r\n  resume,\r\n  clear,\r\n  wallATile,\r\n  generateMaze,\r\n  placeStart,\r\n  updateGraph,\r\n  removeAWall,\r\n  updateSpeed,\r\n  setIntervalId,\r\n  setAlgorithm,\r\n} = graphSlice.actions;\r\n\r\nexport default graphSlice.reducer;\r\n","import React from \"react\";\r\nimport { FormControl, InputLabel, Select, Button, MenuItem } from \"@material-ui/core\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { solve, reset, step, setAlgorithm, setIntervalId } from \"../../logic/redux/graphSlice\";\r\nimport { getSolverNames } from \"../../logic/AlgorithmManager\";\r\n\r\nconst getOptionsFromArray = (arr) => {\r\n  return arr.map((v) => (\r\n    <MenuItem key={v} value={v}>\r\n      {v}\r\n    </MenuItem>\r\n  ));\r\n};\r\n\r\nconst solveHelper = (dispatch, delay, runSolver, oldTimeout) => {\r\n  clearInterval(oldTimeout);\r\n  if (!runSolver) return;\r\n  let intervalId = setInterval(() => {\r\n    dispatch(step());\r\n  }, delay);\r\n  return intervalId;\r\n};\r\n\r\nconst SolveControl = (props) => {\r\n  const selectedSolver = useSelector((state) => state.graph.algorithms.solve);\r\n  const runSpeed = useSelector((state) => state.graph.solveSpeed);\r\n  const runSolver = useSelector((state) => state.graph.graphData.running);\r\n  const oldTimeout = useSelector(\r\n    (state) => state.graph.intervalId.solve,\r\n    () => true\r\n  );\r\n  const dispatch = useDispatch();\r\n  let intervalId = solveHelper(dispatch, runSpeed, runSolver, oldTimeout);\r\n  dispatch(setIntervalId({ type: \"solve\", value: intervalId }));\r\n\r\n  return (\r\n    <div className=\"sub-section maze-solvers\">\r\n      <FormControl variant=\"outlined\">\r\n        <InputLabel>Solvers</InputLabel>\r\n        <Select\r\n          name=\"solvers\"\r\n          id=\"solvers\"\r\n          value={selectedSolver}\r\n          label=\"Solvers\"\r\n          onChange={(e) => {\r\n            dispatch(setAlgorithm({ value: e.target.value, type: \"solve\" }));\r\n          }}\r\n        >\r\n          {getOptionsFromArray(getSolverNames())}\r\n        </Select>\r\n      </FormControl>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={(e) => {\r\n          dispatch(reset());\r\n          dispatch(solve());\r\n        }}\r\n      >\r\n        Solve\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SolveControl;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getMazeGenerators } from \"../../logic/AlgorithmManager\";\r\nimport { Button, Select, MenuItem, FormControl, InputLabel } from \"@material-ui/core\";\r\nimport { setAlgorithm, generateMaze, clear, generate, setIntervalId, reset } from \"../../logic/redux/graphSlice\";\r\nconst getOptionsFromArray = (arr) => {\r\n  return arr.map((v) => (\r\n    <MenuItem key={v} value={v}>\r\n      {v}\r\n    </MenuItem>\r\n  ));\r\n};\r\n\r\nconst generateHelper = (dispatch, runGenerator, oldTimeout) => {\r\n  clearInterval(oldTimeout);\r\n  if (!runGenerator) return;\r\n  let intervalId = setInterval(() => {\r\n    dispatch(generateMaze());\r\n  }, 10);\r\n  return intervalId;\r\n};\r\n\r\nexport default (props) => {\r\n  const currentGenerator = useSelector((state) => state.graph.algorithms.generate);\r\n  const runGenerator = useSelector((state) => state.graph.generationData.running);\r\n  const oldTimeout = useSelector(\r\n    (state) => state.graph.intervalId.generate,\r\n    () => true\r\n  );\r\n  const dispatch = useDispatch();\r\n  let intervalId = generateHelper(dispatch, runGenerator, oldTimeout);\r\n  dispatch(setIntervalId({ type: \"generate\", value: intervalId }));\r\n\r\n  return (\r\n    <div className=\"sub-section maze-generation\">\r\n      <FormControl variant=\"outlined\">\r\n        <InputLabel>Generators</InputLabel>\r\n        <Select\r\n          name=\"generators\"\r\n          id=\"generators\"\r\n          value={currentGenerator}\r\n          label=\"Generators\"\r\n          onChange={(e) => {\r\n            dispatch(setAlgorithm({ value: e.target.value, type: \"generate\" }));\r\n          }}\r\n        >\r\n          {getOptionsFromArray(getMazeGenerators())}\r\n        </Select>\r\n      </FormControl>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        onClick={(e) => {\r\n          dispatch(reset());\r\n          dispatch(clear());\r\n          dispatch(generate());\r\n        }}\r\n      >\r\n        Generate\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./Tile.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { wallATile, removeAWall } from \"../../logic/redux/graphSlice\";\r\nconst TILE = 25;\r\nconst getCurrentCSS = (type) => {\r\n  let cls = \"tile \";\r\n  switch (type) {\r\n    case \"start\":\r\n      return cls + \"tile-start\";\r\n    case \"end\":\r\n      return cls + \"tile-end\";\r\n    case \"visited\":\r\n      return cls + \"tile-visited\";\r\n    case \"current\":\r\n      return cls + \"tile-current\";\r\n    case \"path\":\r\n      return cls + \"tile-path\";\r\n    case \"wall\":\r\n      return cls + \"tile-wall\";\r\n    default:\r\n      return cls;\r\n  }\r\n};\r\nconst toggleWall = (dispatch, type, id) => {\r\n  switch (type) {\r\n    case \"wall\":\r\n      dispatch(removeAWall(id));\r\n      break;\r\n    default:\r\n      dispatch(wallATile(id));\r\n  }\r\n};\r\n\r\nconst Tile = (props) => {\r\n  const dispatch = useDispatch();\r\n  let cellState = useSelector((state) => state.graph.graphData.data[props.id]);\r\n  let styles = { width: TILE, height: TILE };\r\n  return (\r\n    <td\r\n      id={props.id}\r\n      key={props.id}\r\n      className={getCurrentCSS(cellState.type)}\r\n      style={styles}\r\n      onMouseEnter={(e) => {\r\n        if (e.buttons === 1) toggleWall(dispatch, cellState.type, props.id);\r\n      }}\r\n      onPointerDown={(e) => {\r\n        toggleWall(dispatch, cellState.type, props.id);\r\n      }}\r\n    ></td>\r\n  );\r\n};\r\n\r\nexport default Tile;\r\nexport { TILE };\r\n","import React from \"react\";\r\nimport \"./TopMenu.css\";\r\nimport SolveControl from \"./SolveControl\";\r\nimport GeneratorControl from \"./GeneratorControl\";\r\nimport { TILE } from \"../GraphArea/Tile\";\r\nexport default (props) => {\r\n  return (\r\n    <div className=\"top-menu\">\r\n      <GeneratorControl />\r\n\r\n      <SolveControl />\r\n\r\n        <ul className=\"sub-section legend\">\r\n          <li>\r\n            <p>Start</p>\r\n            <div style={{ width: TILE, height: TILE }} className=\"tile-start\"></div>\r\n          </li>\r\n          <li>\r\n            <p>Goal</p>\r\n            <div style={{ width: TILE, height: TILE }} className=\"tile-end\"></div>\r\n          </li>\r\n          <li>\r\n            <p>Wall</p>\r\n            <div style={{ width: TILE, height: TILE }} className=\"tile-wall\"></div>\r\n          </li>\r\n          <li>\r\n            <p>Path</p>\r\n            <div style={{ width: TILE, height: TILE }} className=\"tile-path\"></div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\nimport \"./GraphArea.css\";\r\nimport Tile, { TILE } from \"./Tile\";\r\nimport { connect } from \"react-redux\";\r\nimport { placeStart, updateGraph } from \"../../logic/redux/graphSlice\";\r\nimport { generateGraph } from \"../../logic/GraphLogic\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  let vertices = state.graph.graphData.vertices;\r\n  return { vertices };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    placeStart: (vertex) => dispatch(placeStart(vertex)),\r\n    updateGraph: (nx, ny) => {\r\n      updateGraph(generateGraph(nx, ny));\r\n    },\r\n  };\r\n};\r\n\r\nclass GraphArea extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { rows: 0, columns: 0 };\r\n  }\r\n  componentDidMount() {\r\n    this.updateSizes();\r\n  }\r\n\r\n  updateSizes = () => {\r\n    let graphArea = document.getElementById(\"graph-area2\");\r\n    let graphW = graphArea.clientWidth;\r\n    let graphH = graphArea.clientHeight;\r\n    // let l = Math.sqrt((graphW * graphH) / 1200);\r\n    let l = TILE + 2; //+2 for border\r\n    let columns = Math.floor(graphW / l);\r\n    let rows = Math.floor(graphH / l);\r\n    let tileW = graphW / columns - 2;\r\n    let tileH = graphH / rows - 2;\r\n    this.setState({ graphW, graphH, columns, rows, tileW, tileH });\r\n    this.props.onLoad(columns, rows);\r\n    this.props.updateGraph(columns, rows);\r\n  };\r\n\r\n  getTiles = () => {\r\n    let tiles = [];\r\n    this.props.vertices.forEach((v) => {});\r\n    for (let r = 0; r < Math.floor(this.props.vertices.length / this.state.columns); r++) {\r\n      let cells = [];\r\n      for (let c = 0; c < Math.floor(this.props.vertices.length / this.state.rows); c++) {\r\n        let id = this.state.columns * r + c;\r\n        cells.push(<Tile id={id} key={id} />);\r\n      }\r\n      tiles.push(<tr key={\"row-\" + r}>{cells}</tr>);\r\n    }\r\n    return tiles;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"graph-area\" id=\"graph-area2\">\r\n        <table>\r\n          <tbody>{this.getTiles()}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphArea);\r\n","import React from \"react\";\r\nimport \"./ControlsMenu.css\";\r\nimport { Slider, Button, Typography } from \"@material-ui/core\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateSpeed, pause, reset, clear, resume } from \"../../logic/redux/graphSlice\";\r\nexport default (props) => {\r\n  const dispatch = useDispatch();\r\n  const paused = useSelector((state) => state.graph.paused);\r\n  const solveSpeed = useSelector((state) => state.graph.solveSpeed);\r\n  return (\r\n    <div className=\"controls-menu\">\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={(e) => {\r\n          if (paused) dispatch(resume());\r\n          else dispatch(pause());\r\n        }}\r\n      >\r\n        {paused ? \"Resume\" : \"Pause\"}\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={(e) => {\r\n          dispatch(reset());\r\n        }}\r\n      >\r\n        Reset\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={(e) => {\r\n          dispatch(reset());\r\n          dispatch(clear());\r\n        }}\r\n      >\r\n        Clear\r\n      </Button>\r\n      <div>\r\n        <Typography gutterBottom>Speed</Typography>\r\n        <Slider\r\n          onChangeCommitted={(e, v) => dispatch(updateSpeed(1010 - v))} //TODO: remove hard coded values\r\n          defaultValue={750}\r\n          step={50}\r\n          min={500}\r\n          max={1000}\r\n          aria-labelledby=\"discrete-slider\"\r\n          valueLabelDisplay=\"auto\"\r\n          valueLabelFormat={(v) => 1010 - v}\r\n          marks\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport TopMenu from \"./components/TopMenu/TopMenu\";\r\nimport \"./App.css\";\r\nimport GraphArea from \"./components/GraphArea/GraphArea\";\r\nimport { generateGraph } from \"./logic/GraphLogic\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateGraph } from \"./logic/redux/graphSlice\";\r\nimport ControlsMenu from \"./components/ControlsMenu/ControlsMenu\";\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className=\"App\">\r\n      <TopMenu />\r\n      <GraphArea onLoad={(nx, ny) => dispatch(updateGraph(generateGraph(nx, ny)))} />\r\n      <ControlsMenu />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport graphReducer from \"./graphSlice\";\r\nexport default configureStore({\r\n  reducer: {\r\n    graph: graphReducer,\r\n    middleware:getDefaultMiddleware({immutableCheck:false,serializableCheck:false})\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./logic/redux/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}