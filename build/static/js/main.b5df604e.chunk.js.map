{"version":3,"sources":["logic/maze/Random.js","logic/AlgorithmManager.js","logic/maze/Prim.js","logic/maze/DFS.js","logic/solvers/BFS.js","logic/solvers/DFS.js","logic/solvers/Dijkstra.js","logic/GraphLogic.js","logic/redux/reducers/reducers.js","logic/redux/graphSlice.js","components/TopMenu/SolveControl.js","components/TopMenu/GeneratorControl.js","components/GraphArea/Tile.js","components/LegendArea/Legend.js","components/ControlsMenu/ControlsMenu.js","components/TopMenu/TopMenu.js","components/GraphArea/GraphArea.js","App.js","logic/redux/store.js","index.js"],"names":["generators","graphData","generationData","start","goal","vertices","walls","firstRun","edges","queue","running","extraParams","weighted","deltaWalls","deltaHoles","forEach","v","data","value","Math","floor","random","push","length","undefined","leftOuts","filter","n","neighbors","reduce","res","n2","includes","sort","a","b","l","pop","tmp","currentNode","nodeNeighbors","neighbor","secondNeighbor","cornerNeighbors","Random","DFS","filteredNeighbors","currentHead","shift","solvers","BFS","graphState","visited","parentDict","tmpQueue","currentVertex","goalNode","indexOf","updatedQueue","Dijkstra","node","baseValue","addedValue","getMazeGenerators","names","getSolverNames","generateGraph","nx","ny","r","c","id","removeEdge","e","restoreEdge","step","state","paused","drawPath","pathTile","type","skip","f","algorithms","solve","current","placeStart","action","payload","oldVal","placeEnd","placeNode","clean","generate","weightCheck","setIntervalId","console","log","intervalId","pause","reset","selectedTile","replace","clearInterval","setWeightCheck","toggleSkip","resume","clear","updateSpeed","solveSpeed","selectTile","wallATile","removeAWall","toggleWall","oldId","setAlgorithm","algorithmDict","generateMaze","w","updateGraph","randomStart","Object","keys","newData","graphSlice","createSlice","name","initialState","end","solveArr","reducers","graphReducer","actions","SolveControl","props","selectedSolver","useSelector","graph","runSpeed","runSolver","runGenerator","oldTimeout","dispatch","useDispatch","delay","setInterval","solveHelper","className","FormControl","variant","InputLabel","Select","disabled","label","onChange","target","map","MenuItem","key","Button","color","startIcon","onClick","currentGenerator","isWeighted","generateHelper","FormControlLabel","control","Checkbox","checked","getCurrentCSS","cls","Tile","cellState","oldData","styles","width","height","style","onMouseEnter","buttons","onPointerDown","icon","Typography","gutterBottom","Slider","onChangeCommitted","defaultValue","min","max","aria-labelledby","valueLabelDisplay","valueLabelFormat","marks","GeneratorControl","GraphArea","updateSizes","graphArea","document","getElementById","graphW","clientWidth","graphH","clientHeight","columns","TILE","rows","tileW","tileH","setState","onLoad","getTiles","tiles","cells","this","onContextMenu","preventDefault","Component","connect","vertex","App","configureStore","reducer","middleware","getDefaultMiddleware","immutableCheck","serializableCheck","ReactDOM","render","StrictMode","store"],"mappings":"+bAAe,ICQTA,EAAa,CAAE,SCRN,SAAUC,EAAWC,GAAiB,IAC7CC,EAAwCF,EAAxCE,MAAOC,EAAiCH,EAAjCG,KAAMC,EAA2BJ,EAA3BI,SAAUC,EAAiBL,EAAjBK,MACvBC,GADwCN,EAAVO,MACsBN,EAApDK,UAAUE,EAA0CP,EAA1CO,MAAOC,EAAmCR,EAAnCQ,QAASC,EAA0BT,EAA1BS,YAAaC,EAAaV,EAAbU,SACzCC,EAAa,GACbC,EAAa,GACjB,GAAIP,EAEFF,EAASU,SAAQ,SAACC,GACZA,IAAMb,GAASa,IAAMZ,IAClBQ,IAAUX,EAAUgB,KAAKD,GAAGE,MAAQC,KAAKC,MAAsB,IAAhBD,KAAKE,WACzDR,EAAWS,KAAKN,OAGpBd,EAAeK,UAAW,EAC1BL,EAAeO,MAAQ,CAACN,OACnB,CACL,GAAqB,IAAjBM,EAAMc,OAAc,CACtB,QAA6BC,IAAzBb,EAAYc,SAAwB,CACtC,IAAIA,EAAWnB,EAAMoB,QAAO,SAACC,GAAD,OAAO1B,EAAUgB,KAAKU,GAAGC,UAAUC,QAAO,SAACC,EAAKC,GAAN,OAAaD,GAAOxB,EAAM0B,SAASD,MAAK,MAC9GN,EAASQ,MAAK,SAACC,EAAGC,GAAJ,OAAUlC,EAAUgB,KAAKiB,GAAGhB,MAAQjB,EAAUgB,KAAKkB,GAAGjB,SACpEP,EAAc,CAAEc,YAJI,IAOhBA,EAAad,EAAbc,SACN,QAAiBD,IAAbC,GAA8C,IAApBA,EAASF,OAMhC,MAAO,CAAEb,SAAS,EAAOG,WAAY,GAAIC,WAAY,GAAIZ,kBAL9D,IAAIkC,EAAIX,EAASY,MACjB5B,EAAMa,KAAKc,GACX,IAAIE,EAAMrC,EAAUgB,KAAKmB,GAAGR,UAAUF,QAAO,SAACC,GAAD,OAAOrB,EAAM0B,SAASL,KAAOlB,EAAMuB,SAASL,MACrFW,EAAIf,OAAS,GAAGd,EAAMa,KAAKgB,EAAInB,KAAKC,MAAMD,KAAKE,SAAWiB,EAAIf,UAClEZ,EAAc,CAAEc,YAGpB,IAAIc,EAAc9B,EAAM4B,MACpBG,EAAgBvC,EAAUgB,KAAKsB,GAAaX,UAGhDY,GADAA,EAAgBA,EAAcd,QAAO,SAACe,GAAD,OAAehC,EAAMuB,SAASS,IAAanC,EAAM0B,SAASS,OACjEf,QAAO,SAACe,GAAD,OACnCxC,EAAUgB,KAAKwB,GAAUb,UAAUC,QAAO,SAACC,EAAKY,GAC9C,OAAIA,IAAmBtC,IACnBsC,IAAmBH,EAAoBT,IACvCrB,EAAMuB,SAASU,KAAoBpC,EAAM0B,SAASU,QAChCzC,EAAUgB,KAAKyB,GAAgBC,gBACfjB,QAAO,SAACC,GAAD,OAAQrB,EAAM0B,SAASL,MAChDJ,OAAS,IACtBO,OACN,MAIL5B,EAAeO,MAAf,sBAA2BA,EAAMiB,QAAO,SAACC,GAAD,OAAOA,IAAMY,MAArD,YAAsEC,IACtEtC,EAAeO,MAAMwB,MAAK,SAACC,EAAGC,GAAJ,OAAUlC,EAAUgB,KAAKiB,GAAGhB,MAAQjB,EAAUgB,KAAKkB,GAAGjB,SAGhFJ,EAAU,sBAAOA,GAAP,CAAmByB,IAE/B,MAAO,CAAE7B,UAASI,aAAYD,aAAYX,iBAAgBS,gBD/CvBiC,ODRtB,SAAU3C,EAAWC,GAAiB,IAC7CC,EAA0BF,EAA1BE,MAAOC,EAAmBH,EAAnBG,KAAMC,EAAaJ,EAAbI,SACfQ,EAAa,GAKjB,OAHAR,EAASU,SAAQ,SAACC,GACZG,KAAKE,SAAW,IAAOL,IAAMb,GAASa,IAAMZ,GAAMS,EAAWS,KAAKN,MAEjE,CAAEN,SAAS,EAAOI,WAJV,GAIsBD,aAAYX,mBCCN2C,IER9B,SAAU5C,EAAWC,GAAiB,IAC7CC,EAAiCF,EAAjCE,MAAOC,EAA0BH,EAA1BG,KAAMC,EAAoBJ,EAApBI,SAAUC,EAAUL,EAAVK,MADqB,EAEfJ,EAA7BK,EAF4C,EAE5CA,SAAUE,EAFkC,EAElCA,MAAOC,EAF2B,EAE3BA,QACnBG,EAAa,GACbC,EAAa,GACjB,GAAIP,EAEFF,EAASU,SAAQ,SAACC,GACZA,IAAMb,GAASa,IAAMZ,GAAMS,EAAWS,KAAKN,MAEjDd,EAAeK,UAAW,EAC1BL,EAAeO,MAAQ,CAACN,OACnB,CACL,IAAIyB,EAAWkB,EAAmBC,EAClC,EAAG,CAID,GAAqB,IAAjBtC,EAAMc,OAAc,MAAO,CAAEb,SAAS,EAAOG,WAAY,GAAIC,WAAY,GAAIZ,kBAGjF6C,EAActC,EAAMuC,QAEpBF,GADAlB,EAAY3B,EAAUgB,KAAK8B,GAAanB,WACVF,QAAO,SAACC,GAAD,OAAOrB,EAAM0B,SAASL,YACpDC,EAAUL,OAASuB,EAAkBvB,OAAS,IAAMK,EAAUI,SAAS5B,IAEhFwB,EAAUK,MAAK,SAACC,EAAGC,GAAJ,MAAU,IAAOhB,KAAKE,YACrCZ,EAAK,sBAAOmB,GAAP,YAAqBnB,EAAMiB,QAAO,SAACC,GAAD,OAAQC,EAAUI,SAASL,QAClEb,EAAU,sBAAOA,GAAP,CAAmBiC,IAC7B7C,EAAc,2BAAQA,GAAR,IAAwBO,UAExC,MAAO,CAAEC,UAASI,aAAYD,aAAYX,oBFrBtC+C,EAAU,CACdC,IGXa,SAAaC,GAAa,IACjC3C,EAAqD2C,EAArD3C,MAAOC,EAA8C0C,EAA9C1C,MAAO2C,EAAuCD,EAAvCC,QAASC,EAA8BF,EAA9BE,WAAY3C,EAAkByC,EAAlBzC,QAASN,EAAS+C,EAAT/C,KAClD,GAAqB,IAAjBK,EAAMc,OAAc,OAAO4B,EAC/B,IAAIG,EAAQ,YAAO7C,GACnBA,EAAQ,GACR,IALsC,iBAMpC,IAAI8C,EAAgBD,EAASjB,MAEzBT,EAAYpB,EAAM+C,GAKtB,IAJA3B,EAAYA,EAAUF,QAAO,SAACV,GAAD,OAAQoC,EAAQpB,SAAShB,KAAOP,EAAMuB,SAAShB,MAAIiB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,MACzFpB,SAAQ,SAACC,GAAD,OAAQqC,EAAWrC,GAAKuC,KAC1C9C,EAAK,sBAAOmB,GAAP,YAAqBnB,IAC1B2C,EAAQ9B,KAAKiC,GACT3B,EAAUI,SAAS5B,GAAO,CAC5B,IAAIoD,EAAW5B,EAAUA,EAAU6B,QAAQrD,IAC3CiD,EAAWG,GAAYD,EACvB7C,GAAU,IAXP4C,EAAS/B,OAAS,GAAI,IAc7B,MAAO,CAAEf,QAAOC,QAAO2C,UAASC,aAAY3C,UAASN,SHPrDyC,IIZa,SAAaM,GAAa,IACjC3C,EAAqD2C,EAArD3C,MAAOC,EAA8C0C,EAA9C1C,MAAO2C,EAAuCD,EAAvCC,QAASC,EAA8BF,EAA9BE,WAAY3C,EAAkByC,EAAlBzC,QAASN,EAAS+C,EAAT/C,KAClD,GAAqB,IAAjBK,EAAMc,OAAc,OAAO,2BAAK4B,GAAZ,IAAwBzC,SAAS,IACzD,IAAI6C,EAAgB9C,EAAMuC,QAEtBpB,EAAYpB,EAAM+C,GAElBG,GADJ9B,EAAYA,EAAUF,QAAO,SAACV,GAAD,OAAQoC,EAAQpB,SAAShB,OACzBU,QAAO,SAACV,GAAD,OAAOP,EAAMuB,SAAShB,MAM1D,GALI0C,EAAanC,OAAS,IAAGd,EAAQA,EAAMiB,QAAO,SAACV,GAAD,OAAQ0C,EAAa1B,SAAShB,OAChFY,EAAUb,SAAQ,SAACC,GAAD,OAAQqC,EAAWrC,GAAKuC,KAE1C9C,EAAK,sBAAOmB,GAAP,YAAqBnB,IAC1B2C,EAAQ9B,KAAKiC,GACT3B,EAAUI,SAAS5B,GAAO,CAC5B,IAAIoD,EAAW5B,EAAUA,EAAU6B,QAAQrD,IAC3CiD,EAAWG,GAAYD,EACvB7C,GAAU,EAEZ,MAAO,CAAEF,QAAOC,QAAO2C,UAASC,aAAY3C,UAASN,SJLrDuD,SKZa,SAAUR,GAAa,IAC9B3C,EAAwE2C,EAAxE3C,MAAOC,EAAiE0C,EAAjE1C,MAAO2C,EAA0DD,EAA1DC,QAASC,EAAiDF,EAAjDE,WAAY3C,EAAqCyC,EAArCzC,QAASN,EAA4B+C,EAA5B/C,KAAMO,EAAsBwC,EAAtBxC,YAAaM,EAASkC,EAATlC,KACrE,GAAqB,IAAjBR,EAAMc,OAAc,OAAO4B,EAC/B,IAAIZ,EAAc9B,EAAMuC,QAExB,GAAIT,IAAgBnC,EAAM,OAAO,2BAAK+C,GAAZ,IAAwBzC,SAAS,IAC3D0C,EAAQ9B,KAAKiB,GACb,IAAIC,EAAgBhC,EAAM+B,GAmB1B,OAjBAC,EAAczB,SAAQ,SAAC6C,GACrB,IAAIR,EAAQpB,SAAS4B,GAArB,CACA,IAAIC,EAAYlD,EAAY4B,GAAetB,EAAKsB,GAAarB,MACzD4C,EAAa7C,EAAK2C,GAAM1C,YACFM,IAAtBb,EAAYiD,IAAuBjD,EAAYiD,GAAQC,EAAYC,KAErET,EAAWO,GAAQrB,EACnB5B,EAAYiD,GAAQC,EAAYC,OAKpCtB,EAAczB,SAAQ,SAAC6C,GACjBR,EAAQpB,SAAS4B,IAChBnD,EAAMuB,SAAS4B,IAAOnD,EAAMa,KAAKsC,MAExCnD,EAAMwB,MAAK,SAACC,EAAGC,GAAJ,OAAUxB,EAAYuB,GAAKvB,EAAYwB,MAC3C,CAAE3B,QAAOC,QAAO2C,UAASC,aAAY3C,UAASN,ULXvD,SAAS2D,IACP,IAAIC,EAAQ,GACZ,IAAK,IAAIrC,KAAK3B,EAAYgE,EAAM1C,KAAKK,GACrC,OAAOqC,EAGT,SAASC,IACP,IAAID,EAAQ,GACZ,IAAK,IAAIrC,KAAKsB,EAASe,EAAM1C,KAAKK,GAClC,OAAOqC,EMzBT,SAASE,EAAcC,EAAIC,GAGzB,IAFA,IAAI/D,EAAW,GACXG,EAAQ,GACH6D,EAAI,EAAGA,EAAID,EAAIC,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAIG,IAAK,CAC3B,IAAIC,EAAKJ,EAAKE,EAAIC,EAClBjE,EAASiB,KAAKiD,QACI/C,IAAdhB,EAAM+D,KAAmB/D,EAAM+D,GAAM,IACrCA,EAAK,GAAK,IAAMA,EAAK,GAAKJ,GAAMI,EAAKJ,IACvC3D,EAAM+D,GAAIjD,KAAKiD,EAAK,GACpB/D,EAAM+D,EAAK,GAAGjD,KAAKiD,IAEjBA,EAAKJ,GAAM,IACb3D,EAAM+D,GAAIjD,KAAKiD,EAAKJ,GACpB3D,EAAM+D,EAAKJ,GAAI7C,KAAKiD,IAI1B,MAAO,CAAElE,WAAUG,SAGrB,IAAMgE,EAAa,SAACC,EAAGb,GACrB,IAAIpD,EAAK,eAAQiE,GAMjB,OALgBjE,EAAMoD,GACZ7C,SAAQ,SAACY,GACjBnB,EAAMmB,GAAKnB,EAAMmB,GAAGD,QAAO,SAACV,GAAD,OAAOA,IAAM4C,QAE1CpD,EAAMoD,GAAQ,GACPpD,GAGHkE,EAAc,SAACD,EAAG7C,EAAWtB,EAAOsD,GACxC,IAAIpD,EAAK,eAAQiE,GAKjB,OAJA7C,EAAUb,SAAQ,SAACY,GACZrB,EAAM0B,SAASL,KAAInB,EAAMmB,GAAN,sBAAenB,EAAMmB,IAArB,CAAyBiC,QAEnDpD,EAAMoD,GAAN,YAAkBhC,EAAUF,QAAO,SAACC,GAAD,OAAQrB,EAAM0B,SAASL,OACnDnB,GCVM,GACbmE,KAAM,SAACC,GACL,IAAIA,EAAMC,OACV,EAAG,CAGD,GAFqC,IAAjCD,EAAM3E,UAAUQ,MAAMc,SAAcqD,EAAM3E,UAAUS,SAAU,GAE9DkE,EAAM3E,UAAU6E,SAAU,CAC5B,KAAIF,EAAM3E,UAAUQ,MAAMc,OAAS,GAG5B,OAFL,IAAIwD,EAAWH,EAAM3E,UAAUQ,MAAM4B,MAGvC,GAF8C,YAAxCuC,EAAM3E,UAAUgB,KAAK8D,GAAUC,OAAoBJ,EAAM3E,UAAUgB,KAAK8D,GAAUC,KAAO,QAE3FJ,EAAMK,KAAM,SAChB,OAEF,IACInD,GAAMoD,EADFjC,EAAQ2B,EAAMO,WAAWC,QACrBR,EAAM3E,WAKlB,GAHK6B,EAAIpB,UAASoB,EAAG,2BAAQA,GAAR,IAAapB,SAAS,EAAMoE,UAAU,KAC3DF,EAAM3E,UAAN,2BAAuB2E,EAAM3E,WAAc6B,GAEvCA,EAAIgD,WACNF,EAAM3E,UAAUQ,MAAQ,IACM,IAA1BmE,EAAM3E,UAAUG,WAAoEoB,IAArDoD,EAAM3E,UAAUoD,WAAWuB,EAAM3E,UAAUG,OAE5E,IADA,IAAIiF,EAAUT,EAAM3E,UAAUG,UACiBoB,IAAxCoD,EAAM3E,UAAUoD,WAAWgC,IAChCT,EAAM3E,UAAUQ,MAAhB,sBAA4BmE,EAAM3E,UAAUQ,OAA5C,CAAmD4E,IACnDA,EAAUT,EAAM3E,UAAUoD,WAAWgC,GAM3CT,EAAM3E,UAAUmD,QAAQrC,SAAQ,SAACC,GACM,KAAjC4D,EAAM3E,UAAUgB,KAAKD,GAAGgE,OAAaJ,EAAM3E,UAAUgB,KAAKD,GAAGgE,KAAO,oBAEnEJ,EAAMK,OAASL,EAAM3E,UAAUS,SAAWkE,EAAM3E,UAAU6E,YAGrEQ,WAAY,SAACV,EAAOW,GAClB,IAAIhB,EAAKgB,EAAOC,QACZC,EAASb,EAAM3E,UAAUgB,KAAKsD,GAClCK,EAAM3E,UAAUE,MAAQoE,EACxBK,EAAM3E,UAAUgB,KAAKsD,GAArB,2BAAgCkB,GAAhC,IAAwCT,KAAM,WAGhDU,SAAU,SAACd,EAAOW,GAChB,IAAIhB,EAAKgB,EAAOC,QACZC,EAASb,EAAM3E,UAAUgB,KAAKsD,GAClCK,EAAM3E,UAAUG,KAAOmE,EACvBK,EAAM3E,UAAUgB,KAAKsD,GAArB,2BAAgCkB,GAAhC,IAAwCT,KAAM,SAEhDW,UAAW,SAACf,EAAOW,GAAY,IAAD,EACTA,EAAOC,QAAQjB,GAA5BS,EADsB,EACtBA,KAAMT,EADgB,EAChBA,GACRkB,EAASb,EAAM3E,UAAUgB,KAAKsD,GAClCK,EAAMI,GAAQT,EACdK,EAAM3E,UAAUgB,KAAKsD,GAArB,2BAAgCkB,GAAhC,IAAwCT,UAG1CI,MAAO,SAACR,GAENA,EAAM1E,eAAeQ,SAAU,EAE/BkE,EAAM3E,UAAN,2BACK2E,EAAM3E,WADX,IAEE2F,OAAO,EACPlF,SAAS,EACTC,YAAa,MAGjBkF,SAAU,SAACjB,EAAOW,GAChBX,EAAM1E,eAAeU,SAAW2E,EAAOC,QACvCZ,EAAMkB,YAAcP,EAAOC,QAC3BZ,EAAM3E,UAAU2F,OAAQ,EACxBhB,EAAM1E,eAAN,2BACK0E,EAAM1E,gBADX,IAEES,YAAa,GACbD,SAAS,EACTH,UAAU,EACVE,MAAO,CAACmE,EAAM3E,UAAUE,UAG5B4F,cAAe,SAACnB,EAAOW,GAAY,IAAD,EACVA,EAAOC,QAAvBR,EAD0B,EAC1BA,KAAM9D,EADoB,EACpBA,MACZ8E,QAAQC,IAAI,kBAAmBjB,EAAM9D,GACrC0D,EAAMsB,WAAWlB,GAAQ9D,GAE3BiF,MAAO,SAACvB,GACNA,EAAMC,QAAS,GAEjBuB,MAAO,SAACxB,GACNoB,QAAQC,IAAI,cACezE,IAAvBoD,EAAMyB,eACRzB,EAAM3E,UAAUgB,KAAK2D,EAAMyB,cAAcrB,KAAOJ,EAAM3E,UAAUgB,KAAK2D,EAAMyB,cAAcrB,KAAKsB,QAAQ,KAAM,IAC5G1B,EAAMyB,kBAAe7E,GAGlBoD,EAAM3E,UAAU2F,OACnBhB,EAAM3E,UAAUI,SAASU,SAAQ,SAACC,GAAM,IAEhCgE,EAASJ,EAAM3E,UAAUgB,KAAKD,GAA9BgE,KACDJ,EAAM1E,eAAeU,WAAUgE,EAAM3E,UAAUgB,KAAKD,GAAGE,MAAQ,GACvD,UAAT8D,GAA6B,QAATA,GAA2B,SAATA,IACxCJ,EAAM3E,UAAUgB,KAAKD,GAArB,2BAA+B4D,EAAM3E,UAAUgB,KAAKD,IAApD,IAAwDgE,KAAM,SAGpEuB,cAAc3B,EAAMsB,WAAWd,OAC/BmB,cAAc3B,EAAMsB,WAAWL,UAC/BjB,EAAMsB,WAAa,CACjBd,WAAO5D,EACPqE,cAAUrE,GAEZoD,EAAM3E,UAAN,2BACK2E,EAAM3E,WADX,IAEE2F,OAAO,EACPlF,SAAS,EACToE,UAAU,EACVrE,MAAO,CAACmE,EAAM3E,UAAUE,OACxBiD,QAAS,GACTC,WAAY,KAEduB,EAAM1E,eAAN,2BACK0E,EAAM1E,gBADX,IAEEQ,SAAS,EACTD,MAAO,GACPF,UAAU,EACVI,YAAa,KAEfiE,EAAMC,QAAS,GAEjB2B,eAAgB,SAAC5B,EAAOW,GACtBX,EAAMkB,YAAcP,EAAOC,SAE7BiB,WAAY,SAAC7B,GACXA,EAAMK,MAAQL,EAAMK,MAEtByB,OAAQ,SAAC9B,GACPA,EAAMC,QAAS,GAEjB8B,MAAO,SAAC/B,GACNA,EAAMkB,aAAc,EACpBlB,EAAM1E,eAAeU,UAAW,EAChCgE,EAAM3E,UAAUK,MAAQ,GACxBsE,EAAM3E,UAAUI,SAASU,SAAQ,SAACC,GAChC4D,EAAM3E,UAAUO,MAAMQ,GAAK4D,EAAM3E,UAAUgB,KAAKD,GAAGY,UACnDgD,EAAM3E,UAAUgB,KAAKD,GAAGE,OAAS,EACI,UAAjC0D,EAAM3E,UAAUgB,KAAKD,GAAGgE,MAAqD,QAAjCJ,EAAM3E,UAAUgB,KAAKD,GAAGgE,OAAgBJ,EAAM3E,UAAUgB,KAAKD,GAAGgE,KAAO,QAG3H4B,YAAa,SAAChC,EAAOW,GACnBX,EAAMiC,WAAatB,EAAOC,SAE5BsB,WAAY,SAAClC,EAAOW,GAClB,IAAIX,EAAM3E,UAAUS,UAAWkE,EAAM1E,eAAeQ,QAApD,CACA,IAAI6D,EAAKgB,EAAOC,aACWhE,IAAvBoD,EAAMyB,eACRzB,EAAM3E,UAAUgB,KAAK2D,EAAMyB,cAAcrB,KAAOJ,EAAM3E,UAAUgB,KAAK2D,EAAMyB,cAAcrB,KAAKsB,QAAQ,KAAM,IAC5G1B,EAAMyB,kBAAe7E,GAEnB+C,IAAOK,EAAM3E,UAAUE,MAAOyE,EAAM3E,UAAUgB,KAAKsE,EAAOC,SAASR,KAAO,UACzEJ,EAAM3E,UAAUgB,KAAKsE,EAAOC,SAASR,KAAO,QACjDJ,EAAMyB,aAAe9B,IAEvBwC,UAAW,SAACnC,EAAOW,GAEJ,KADEX,EAAM3E,UAAUgB,KAAKsE,EAAOC,SAArCR,WACoCxD,IAAvBoD,EAAMyB,eAEzBzB,EAAM3E,UAAUK,MAAMgB,KAAKiE,EAAOC,SAClCZ,EAAM3E,UAAUgB,KAAKsE,EAAOC,SAASR,KAAO,OAC5CJ,EAAM3E,UAAUO,MAAhB,eAA6BgE,EAAWI,EAAM3E,UAAUO,MAAO+E,EAAOC,UACtEZ,EAAM3E,UAAU2F,OAAQ,IAG1BoB,YAAa,SAACpC,EAAOW,GAAY,IAAD,EACJX,EAAM3E,UAAUgB,KAAKsE,EAAOC,SAAhDR,EADwB,EACxBA,KAAMpD,EADkB,EAClBA,UACC,SAAToD,QAA0CxD,IAAvBoD,EAAMyB,eAC7BzB,EAAM3E,UAAUK,MAAQsE,EAAM3E,UAAUK,MAAMoB,QAAO,SAACV,GAAD,OAAOA,IAAMuE,EAAOC,WACzEZ,EAAM3E,UAAUgB,KAAKsE,EAAOC,SAASR,KAAO,GAC5CJ,EAAM3E,UAAUO,MAAhB,eAA6BkE,EAAYE,EAAM3E,UAAUO,MAAOoB,EAAWgD,EAAM3E,UAAUK,MAAOiF,EAAOC,UACpE,IAAjCZ,EAAM3E,UAAUK,MAAMiB,SAAcqD,EAAM3E,UAAU2F,OAAQ,KAElEqB,WAAY,SAACrC,EAAOW,GAAY,IAqBxBP,EAAMkC,EArBiB,EACHtC,EAAM3E,UAAUgB,KAAKsE,EAAOC,SAAhDR,EADuB,EACvBA,KAAMpD,EADiB,EACjBA,UACR2C,EAAKgB,EAAOC,SACH,SAATR,GACFJ,EAAM3E,UAAUgB,KAAKsD,GAAIS,KAAO,GAChCJ,EAAM3E,UAAN,2BACK2E,EAAM3E,WADX,IAEEK,MAAOsE,EAAM3E,UAAUK,MAAMoB,QAAO,SAACV,GAAD,OAAOA,IAAMuD,KACjD/D,MAAM,eAAMkE,EAAYE,EAAM3E,UAAUO,MAAOoB,EAAWgD,EAAM3E,UAAUK,MAAOiE,MAE9C,IAAjCK,EAAM3E,UAAUK,MAAMiB,SAAcqD,EAAM3E,UAAU2F,OAAQ,IAG9C,UAATZ,GAA6B,QAATA,QAAyCxD,IAAvBoD,EAAMyB,eACrDzB,EAAM3E,UAAUK,MAAMgB,KAAKiD,GAC3BK,EAAM3E,UAAN,2BAAuB2E,EAAM3E,WAA7B,IAAwC2F,OAAO,EAAOpF,MAAM,eAAMgE,EAAWI,EAAM3E,UAAUO,MAAO+D,MACpGK,EAAM3E,UAAUgB,KAAKsD,GAAIS,KAAO,aAIPxD,IAAvBoD,EAAMyB,gBAGJzB,EAAMyB,eAAiBzB,EAAM3E,UAAUE,OACzC+G,EAAQtC,EAAM3E,UAAUE,MACxByE,EAAM3E,UAAUE,MAAQoE,EACxBS,EAAO,UAEPkC,EAAQtC,EAAM3E,UAAUG,KACxBwE,EAAM3E,UAAUG,KAAOmE,EACvBS,EAAO,OAETJ,EAAM3E,UAAUgB,KAAKsD,GAArB,2BAAgCK,EAAM3E,UAAUgB,KAAKsD,IAArD,IAA0DS,OAAM9D,MAAO,IACvE0D,EAAM3E,UAAUgB,KAAKiG,GAArB,2BAAmCtC,EAAM3E,UAAUgB,KAAKiG,IAAxD,IAAgElC,KAAM,GAAI9D,MAAOC,KAAKC,MAtN3E,IAsN4FD,KAAKE,YAC5GuD,EAAMyB,kBAAe7E,IAIzB2F,aAAc,SAACvC,EAAOW,GAAY,IAE5B6B,EAF2B,EACT7B,EAAOC,QAAvBtE,EADyB,EACzBA,MAAO8D,EADkB,EAClBA,KAEb,OAAQA,GACN,IAAK,QACHoC,EAAgBnE,EAChB,MACF,QACEmE,EAAgBpH,OAESwB,IAAzB4F,EAAclG,KAAsB0D,EAAMO,WAAWH,GAAQ9D,IAGnEmG,aAAc,SAACzC,EAAOW,GACpB,IAAIX,EAAMC,OAAV,CAD+B,iBAGzBD,EAAM1E,eAAeU,UAAYgE,EAAM1E,eAAeK,UACxDqE,EAAM3E,UAAUI,SAASU,SAAQ,SAACC,GAC5BA,IAAM4D,EAAM3E,UAAUE,OAASa,IAAM4D,EAAM3E,UAAUG,KACvDwE,EAAM3E,UAAUgB,KAAKD,GAAGE,MAAQC,KAAKC,MA9OhC,IA8OsCD,KAAKE,UAEhDuD,EAAM3E,UAAUgB,KAAKD,GAAGE,MAAQ,KAGtC,IAX6B,GAY0CgE,EAD/DlF,EAAW4E,EAAMO,WAAWU,WACqCjB,EAAM3E,UAAW2E,EAAM1E,gBAA1FW,EAZuB,EAYvBA,WAAYC,EAZW,EAYXA,WAAYJ,EAZD,EAYCA,QAASR,EAZV,EAYUA,eAAgBS,EAZ1B,EAY0BA,YACvDiE,EAAM3E,UAAUK,MAAhB,sBAA4BsE,EAAM3E,UAAUK,MAAMoB,QAAO,SAACV,GAAD,OAAQF,EAAWkB,SAAShB,OAArF,YAA6FH,IAC7FA,EAAWE,SAAQ,SAACuG,GACdA,IAAM1C,EAAM3E,UAAUE,OAASmH,IAAM1C,EAAM3E,UAAUG,OACzDwE,EAAM3E,UAAUgB,KAAKqG,GAAGtC,KAAO,OAC/BJ,EAAM3E,UAAUO,MAAhB,eAA6BgE,EAAWI,EAAM3E,UAAUO,MAAO8G,QAGjExG,EAAWC,SAAQ,SAACY,GACdA,IAAMiD,EAAM3E,UAAUE,OAASwB,IAAMiD,EAAM3E,UAAUG,OAEzDwE,EAAM3E,UAAUgB,KAAKU,GAAGqD,KAAO,GAC/BJ,EAAM3E,UAAUO,MAAhB,eACKkE,EAAYE,EAAM3E,UAAUO,MAAOoE,EAAM3E,UAAUgB,KAAKU,GAAGC,UAAWgD,EAAM3E,UAAUK,MAAOqB,QAGpGiD,EAAM1E,eAAN,2BAA4BA,GAA5B,IAA4CQ,UAASC,iBA1BvD,GAAI,UA2BKiE,EAAMK,MAAQL,EAAM1E,eAAeQ,WAG9C6G,YAAa,SAAC3C,EAAOW,GAAW,MAEJA,EAAOC,QAA3BnF,EAFwB,EAExBA,SAAUG,EAFc,EAEdA,MAChBoE,EAAM3E,UAAUI,SAAWA,EAC3B,IAAImH,EAAcrG,KAAKC,MAAMD,KAAKE,SAAWhB,EAASkB,QAEtDqD,EAAM3E,UAAUE,MAAQqH,EACxB5C,EAAM3E,UAAUgB,KAAKuG,GAAe,CAAExC,KAAM,QAASpD,UAAWpB,EAAMgH,GAActG,OAAQ,GAC5F0D,EAAM3E,UAAUQ,MAAQ,CAAC+G,GACzBA,EAAcrG,KAAKC,MAAMD,KAAKE,SAAWhB,EAASkB,QAClDqD,EAAM3E,UAAUG,KAAOoH,EACvB5C,EAAM3E,UAAUgB,KAAKuG,GAAe,CAAExC,KAAM,MAAOpD,UAAWpB,EAAMgH,GAActG,OAAQ,GAC1F0D,EAAM3E,UAAUG,KAAOoH,EACvB5C,EAAM3E,UAAUO,MAAQA,EACxBH,EAASU,SAAQ,SAACC,QACgBQ,IAA5BoD,EAAM3E,UAAUgB,KAAKD,KAAkB4D,EAAM3E,UAAUgB,KAAKD,GAAK,CAAEgE,KAAM,GAAIpD,UAAWpB,EAAMQ,GAAIE,OAAQ,OAGhHb,EAASU,SAAQ,SAACC,GAEhB,IAAI2B,EAAkBiC,EAAM3E,UAAUgB,KAAKD,GAAGY,UAC3CC,QAAO,SAACC,EAAKH,GAAN,4BAAgBG,GAAhB,YAAwB8C,EAAM3E,UAAUgB,KAAKU,GAAGC,cAAY,IACnEK,OAGHU,EAAkBA,EAAgBd,QAAO,SAACC,EAAKH,GAE7C,OADAG,EAAIH,IAAMG,EAAIH,IAAM,GAAK,EAClBG,IACN,IAGHa,EAAkB8E,OAAOC,KAAK/E,GAAiBd,QAAO,SAACC,EAAKH,GAE1D,OAD2B,IAAvBgB,EAAgBhB,IAAYA,GAAKX,IAAGc,EAAG,sBAAOA,GAAP,CAAgB,EAAJH,KAChDG,IACN,IACH,IAAI6F,EAAO,2BAAQ/C,EAAM3E,UAAUgB,KAAKD,IAA7B,IAAiC2B,oBAC5CiC,EAAM3E,UAAUgB,KAAKD,GAAK2G,OCnUnBC,EAAaC,YAAY,CACpCC,KAAM,QACNC,aAAc,CACZ1B,kBAAc7E,EACdsE,aAAa,EACbb,MAAM,EACNhF,UAAW,CACT2F,OAAO,EACPvF,SAAU,GACVG,MAAO,GACPS,KAAM,GACNoC,WAAY,GACZD,QAAS,GACT3C,MAAO,GACPqE,UAAU,EACV1E,MAAO,EACPD,OAAQ,EACRO,SAAS,EACTJ,MAAO,GACPK,YAAa,GAEb0E,aAAS7D,GAEXtB,eAAgB,CACdU,UAAU,EACVF,SAAS,EACTD,MAAO,GACPF,UAAU,EACVI,YAAa,IAEfkG,WAAY,GACZ1G,MAAO,IACP6H,KAAM,EAENnD,QAAQ,EACRqB,WAAY,CACVd,WAAO5D,EACPqE,cAAUrE,GAEZ2D,WAAY,CACVC,MAAOnB,IAAiB,GACxB4B,SAAU9B,IAAoB,GAC9BkE,SAAUhE,MAGdiE,SAAUC,I,EAuBRP,EAAWQ,QAnBbzD,E,EAAAA,KACAS,E,EAAAA,MACAS,E,EAAAA,SACAO,E,EAAAA,MACAD,E,EAAAA,MACAO,E,EAAAA,OACAC,E,EAAAA,MAEAU,G,EADAN,U,EACAM,cACA/B,E,EAAAA,WACAiC,E,EAAAA,YAEAd,G,EADAO,Y,EACAP,YACAD,E,EAAAA,eACAI,E,EAAAA,YACAb,E,EAAAA,cACAoB,E,EAAAA,aACAF,E,EAAAA,WACAH,E,EAAAA,WAGac,IAAf,Q,kCCSeS,EAzDM,SAACC,GACpB,IAAMC,EAAiBC,aAAY,SAAC5D,GAAD,OAAWA,EAAM6D,MAAMtD,WAAWC,SAC/DsD,EAAWF,aAAY,SAAC5D,GAAD,OAAWA,EAAM6D,MAAM5B,cAC9C8B,EAAYH,aAAY,SAAC5D,GAAD,OAAWA,EAAM6D,MAAMxI,UAAUS,WACzDkI,EAAeJ,aAAY,SAAC5D,GAAD,OAAWA,EAAM6D,MAAMvI,eAAeQ,WACjEmI,EAAaL,aACjB,SAAC5D,GAAD,OAAWA,EAAM6D,MAAMvC,WAAWd,SAClC,kBAAM,KAEF0D,EAAWC,cACb7C,EAnBc,SAAC4C,EAAUE,EAAOL,EAAWE,GAE/C,GADAtC,cAAcsC,GACTF,EAIL,OAHiBM,aAAY,WAC3BH,EAASnE,OACRqE,GAccE,CAAYJ,EAAUJ,EAAUC,EAAWE,GAG5D,OAFAC,EAAS/C,EAAc,CAAEf,KAAM,QAAS9D,MAAOgF,KAG7C,yBAAKiD,UAAU,4BACb,kBAACC,EAAA,EAAD,CAAaC,QAAQ,YACnB,kBAACC,EAAA,EAAD,gBACA,kBAACC,EAAA,EAAD,CACEC,SAAUb,GAAaC,EACvBd,KAAK,UACLvD,GAAG,UACHrD,MAAOqH,EACPkB,MAAM,UACNC,SAAU,SAACjF,GACTqE,EAAS3B,EAAa,CAAEjG,MAAOuD,EAAEkF,OAAOzI,MAAO8D,KAAM,aAGlCf,IA3ClB2F,KAAI,SAAC5I,GAAD,OACb,kBAAC6I,EAAA,EAAD,CAAUC,IAAK9I,EAAGE,MAAOF,GACtBA,QA4CD,kBAAC+I,EAAA,EAAD,CACEV,QAAQ,YACRG,SAAUb,GAAaC,EACvBoB,MAAM,UAENC,UAAW,kBAAC,IAAD,MACXC,QAAS,SAACzF,GACRqE,EAAS1C,KACT0C,EAAS1D,OARb,SAaA,kBAAC2E,EAAA,EAAD,CACEV,QAAQ,YACRW,MAAM,YACNC,UAAW,kBAAC,IAAD,MACXC,QAAS,SAACzF,GACRqE,EAAS1C,OALb,W,mCC3CS,WAACkC,GACd,IAAM6B,EAAmB3B,aAAY,SAAC5D,GAAD,OAAWA,EAAM6D,MAAMtD,WAAWU,YACjEuE,EAAa5B,aAAY,SAAC5D,GAAD,OAAWA,EAAM6D,MAAM3C,eAChD6C,EAAYH,aAAY,SAAC5D,GAAD,OAAWA,EAAM6D,MAAMxI,UAAUS,WACzDkI,EAAeJ,aAAY,SAAC5D,GAAD,OAAWA,EAAM6D,MAAMvI,eAAeQ,WACjEmI,EAAaL,aACjB,SAAC5D,GAAD,OAAWA,EAAM6D,MAAMvC,WAAWL,YAClC,kBAAM,KAEFiD,EAAWC,cACb7C,EAnBiB,SAAC4C,EAAUF,EAAcC,GAE9C,GADAtC,cAAcsC,GACTD,EAIL,OAHiBK,aAAY,WAC3BH,EAASzB,OACR,IAccgD,CAAevB,EAAUF,EAAcC,GAExD,OADAC,EAAS/C,EAAc,CAAEf,KAAM,WAAY9D,MAAOgF,KAEhD,yBAAKiD,UAAU,+BACb,kBAACC,EAAA,EAAD,CAAaC,QAAQ,YACnB,kBAACC,EAAA,EAAD,mBACA,kBAACC,EAAA,EAAD,CACEzB,KAAK,aACL0B,SAAUb,GAAaC,EACvBrE,GAAG,aACHrD,MAAOiJ,EACPV,MAAM,aACNC,SAAU,SAACjF,GACTqE,EAAS3B,EAAa,CAAEjG,MAAOuD,EAAEkF,OAAOzI,MAAO8D,KAAM,gBAGlCjB,IA1ClB6F,KAAI,SAAC5I,GAAD,OACb,kBAAC6I,EAAA,EAAD,CAAUC,IAAK9I,EAAGE,MAAOF,GACtBA,QA2CD,kBAAC+I,EAAA,EAAD,CACEP,SAAUb,GAAaC,EACvBS,QAAQ,YACRW,MAAM,UACNC,UAAW,kBAAC,IAAD,MACXC,QAAS,SAACzF,GACRqE,EAAS1C,KACT0C,EAASnC,KACTmC,EAASjD,EAASuE,MARtB,YAaA,kBAACE,EAAA,EAAD,CACE/F,GAAG,kBACHgG,QACE,kBAACC,EAAA,EAAD,CACEjG,GAAG,kBACHrD,MAAM,SACNuJ,QAASL,EACTZ,SAAUZ,EACVc,SAAU,SAACjF,EAAGG,GAAJ,OAAckE,EAAStC,EAAe5B,OAGpD6E,MAAM,eCzERiB,I,MAAgB,SAAC1F,GACrB,IAAI2F,EAAM,QACV,OAAQ3F,GACN,IAAK,QACH,OAAO2F,EAAM,aACf,IAAK,MACH,OAAOA,EAAM,WACf,IAAK,UACH,OAAOA,EAAM,sBACf,IAAK,QACH,OAAOA,EAAM,oBACf,IAAK,UACH,OAAOA,EAAM,eACf,IAAK,UACH,OAAOA,EAAM,eACf,IAAK,OACH,OAAOA,EAAM,YACf,IAAK,OACH,OAAOA,EAAM,YACf,IAAK,UACH,OAAOA,EAAM,eACf,QACE,OAAOA,KA6CEC,GAhCF,SAACtC,GACZ,IAAMQ,EAAWC,cACb8B,EAAYrC,aACd,SAAC5D,GAAD,OAAWA,EAAM6D,MAAMxI,UAAUgB,KAAKqH,EAAM/D,OAC5C,SAACuG,EAASnD,GAAV,OAAsBmD,EAAQ9F,OAAS2C,EAAQ3C,MAAQ8F,EAAQ5J,QAAUyG,EAAQzG,SAE/EN,EAAW4H,aACb,SAAC5D,GAAD,OAAWA,EAAM6D,MAAMvI,eAAeU,YACtC,kBAAM,KAEJmK,EAAS,CAAEC,MA9CJ,GA8CiBC,OA9CjB,IA+CX,OACE,wBACE1G,GAAI+D,EAAM/D,GACVuF,IAAKxB,EAAM/D,GACX4E,UAAWuB,GAAcG,EAAU7F,MACnCkG,MAAOH,EACPI,aAAc,SAAC1G,GACK,IAAdA,EAAE2G,SAAetC,EAAS7B,EAAWqB,EAAM/D,MAEjD8G,cAAe,SAAC5G,GACS,UAAnBoG,EAAU7F,MAAuC,QAAnB6F,EAAU7F,KAAgB8D,EAAShC,EAAWwB,EAAM/D,KACjFuE,EAAS7B,EAAWqB,EAAM/D,QAGhC3D,GAAgC,KAAnBiK,EAAU7F,MAAkC,YAAnB6F,EAAU7F,OAA4C,IAArB6F,EAAU3J,WAE9EM,EADAqJ,EAAU3J,QC9DL,I,MAAA,WACb,OACE,yBAAKiI,UAAU,kBACb,wBAAIA,UAAU,sBACZ,4BACE,oCACA,yBAAK+B,MAAO,CAAEF,MDNX,GCMwBC,ODNxB,ICMwC9B,UAAU,gBAEvD,4BACE,mCACA,yBAAK+B,MAAO,CAAEF,MDVX,GCUwBC,ODVxB,ICUwC9B,UAAU,cAEvD,4BACE,mCACA,yBAAK+B,MAAO,CAAEF,MDdX,GCcwBC,ODdxB,ICcwC9B,UAAU,mB,uFCThD,YAACb,GACd,IAAMQ,EAAWC,cACXlE,EAAS2D,aAAY,SAAC5D,GAAD,OAAWA,EAAM6D,MAAM5D,UAC5CI,EAAOuD,aAAY,SAAC5D,GAAD,OAAWA,EAAM6D,MAAMxD,QAC1C4B,EAAa2B,aAAY,SAAC5D,GAAD,OAAWA,EAAM6D,MAAM5B,cAElDyE,EAAOzG,EAAS,kBAAC,KAAD,MAAoB,kBAAC,KAAD,MAExC,OACE,yBAAKsE,UAAU,6BACb,kBAACY,EAAA,EAAD,CACEV,QAAQ,YACRW,MAAM,UACNC,UAAWqB,EACXpB,QAAS,SAACzF,GACIqE,EAARjE,EAAiB6B,IACPP,OAGftB,EAAS,SAAW,SAGvB,kBAACkF,EAAA,EAAD,CACEV,QAAQ,YACRY,UAAW,kBAAC,KAAD,MACXD,MAAM,YACNE,QAAS,SAACzF,GACRqE,EAAS1C,KACT0C,EAASnC,OANb,SAWA,6BACE,kBAAC4E,GAAA,EAAD,CAAYC,cAAY,GAAxB,eACA,kBAACC,GAAA,EAAD,CACEC,kBAAmB,SAACjH,EAAGzD,GAAJ,OAAU8H,EAASlC,EAAY,KAAO5F,KACzD2K,aAAc,KAAO9E,EACrBlC,KAAM,GACNiH,IAAK,IACLC,IAAK,IACLC,kBAAgB,kBAChBC,kBAAkB,OAClBC,iBAAkB,SAAChL,GAAD,OAAO,KAAOA,GAChCiL,OAAK,KAGT,kBAAC3B,EAAA,EAAD,CACEnB,UAAU,eACVoB,QAAS,kBAACC,EAAA,EAAD,CAAUtJ,MAAM,OAAOuJ,QAASxF,EAAMyE,SAAU,kBAAMZ,EAASrC,QACxEgD,MAAM,qBCpDC,YAACnB,GACd,OACE,yBAAKa,UAAU,YACb,kBAAC+C,EAAD,MAEA,kBAAC,EAAD,MACA,kBAAC,GAAD,Q,4CCQAC,I,0DACJ,WAAY7D,GAAQ,IAAD,+BACjB,cAAMA,IAOR8D,YAAc,WACZ,IAAIC,EAAYC,SAASC,eAAe,eACpCC,EAASH,EAAUI,YACnBC,EAASL,EAAUM,aAGnBC,EAAUzL,KAAKC,MAAMoL,EADjBK,IAEJC,EAAO3L,KAAKC,MAAMsL,EAFdG,IAGJE,EAAQP,EAASI,EAAU,EAC3BI,EAAQN,EAASI,EAAO,EAC5B,EAAKG,SAAS,CAAET,SAAQE,SAAQE,UAASE,OAAMC,QAAOC,UACtD,EAAK1E,MAAM4E,OAAON,EAASE,GAC3B,EAAKxE,MAAMf,YAAYqF,EAASE,IApBf,EAuBnBK,SAAW,WACT,IAAIC,EAAQ,GACZ,EAAK9E,MAAMjI,SAASU,SAAQ,SAACC,OAC7B,IAAK,IAAIqD,EAAI,EAAGA,EAAIlD,KAAKC,MAAM,EAAKkH,MAAMjI,SAASkB,OAAS,EAAKqD,MAAMgI,SAAUvI,IAAK,CAEpF,IADA,IAAIgJ,EAAQ,GACH/I,EAAI,EAAGA,EAAInD,KAAKC,MAAM,EAAKkH,MAAMjI,SAASkB,OAAS,EAAKqD,MAAMkI,MAAOxI,IAAK,CACjF,IAAIC,EAAK,EAAKK,MAAMgI,QAAUvI,EAAIC,EAClC+I,EAAM/L,KAAK,kBAAC,GAAD,CAAMiD,GAAIA,EAAIuF,IAAKvF,KAEhC6I,EAAM9L,KAAK,wBAAIwI,IAAK,OAASzF,GAAIgJ,IAEnC,OAAOD,GAhCP,EAAKxI,MAAQ,CAAEkI,KAAM,EAAGF,QAAS,GAFhB,E,iEAKjBU,KAAKlB,gB,+BAiCL,OACE,yBAAKjD,UAAU,aAAa5E,GAAG,cAAcgJ,cAAe,SAAC9I,GAAD,OAAOA,EAAE+I,mBACnE,+BACE,+BAAQF,KAAKH,kB,GA1CCM,cAiDTC,gBA/DS,SAAC9I,GAEvB,MAAO,CAAEvE,SADMuE,EAAM6D,MAAMxI,UAAUI,aAIZ,SAACyI,GAC1B,MAAO,CACLxD,WAAY,SAACqI,GAAD,OAAY7E,EAASxD,EAAWqI,KAC5CpG,YAAa,SAACpD,EAAIC,GAChBmD,EAAYrD,EAAcC,EAAIC,QAsDrBsJ,CAA6CvB,ICjD7CyB,GAXH,WACV,IAAM9E,EAAWC,cACjB,OACE,yBAAKI,UAAU,OACb,kBAAC,GAAD,MACA,kBAAC,GAAD,CAAW+D,OAAQ,SAAC/I,EAAIC,GAAL,OAAY0E,EAASvB,EAAYrD,EAAcC,EAAIC,QACtE,kBAAC,GAAD,QCdSyJ,eAAe,CAC5BC,QAAS,CACPrF,MAAON,EACP4F,WAAWC,YAAqB,CAACC,gBAAe,EAAMC,mBAAkB,OCE5EC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,IACf,kBAAC,GAAD,QAGJhC,SAASC,eAAe,W","file":"static/js/main.b5df604e.chunk.js","sourcesContent":["export default function (graphData, generationData) {\r\n  let { start, goal, vertices } = graphData;\r\n  let deltaWalls = [],\r\n    deltaHoles = [];\r\n  vertices.forEach((v) => {\r\n    if (Math.random() > 0.7 && v !== start && v !== goal) deltaWalls.push(v);\r\n  });\r\n  return { running: false, deltaHoles, deltaWalls, generationData };\r\n}\r\n","import BFS from \"./solvers/BFS\";\r\nimport DFS from \"./solvers/DFS\";\r\nimport Random from \"./maze/Random\";\r\nimport DFSGenerate from \"./maze/DFS\";\r\nimport Prim from \"./maze/Prim\";\r\nimport Dijkstra from \"./solvers/Dijkstra\";\r\n// import Recursive from \"./maze/Recursive\";\r\n\r\nconst generators = { \"Prim's\": Prim, Random, DFS: DFSGenerate };\r\n\r\nconst solvers = {\r\n  BFS,\r\n  DFS,\r\n  Dijkstra,\r\n};\r\n\r\nfunction getMazeGenerators() {\r\n  let names = [];\r\n  for (let n in generators) names.push(n);\r\n  return names;\r\n}\r\n\r\nfunction getSolverNames() {\r\n  let names = [];\r\n  for (let n in solvers) names.push(n);\r\n  return names;\r\n}\r\n\r\nexport { getMazeGenerators, getSolverNames, solvers, generators };\r\n","export default function (graphData, generationData) {\r\n  let { start, goal, vertices, walls, edges } = graphData;\r\n  let { firstRun, queue, running, extraParams, weighted } = generationData;\r\n  let deltaWalls = [];\r\n  let deltaHoles = [];\r\n  if (firstRun) {\r\n    //Fill all the maze with walls\r\n    vertices.forEach((v) => {\r\n      if (v !== start && v !== goal) {\r\n        if (!weighted) graphData.data[v].value = Math.floor(Math.random() * 100); //better than just selecting random queue\r\n        deltaWalls.push(v);\r\n      }\r\n    });\r\n    generationData.firstRun = false;\r\n    generationData.queue = [start]; //start from the start\r\n  } else {\r\n    if (queue.length === 0) {\r\n      if (extraParams.leftOuts === undefined) {\r\n        let leftOuts = walls.filter((n) => graphData.data[n].neighbors.reduce((res, n2) => res && walls.includes(n2), true));\r\n        leftOuts.sort((a, b) => graphData.data[a].value - graphData.data[b].value);\r\n        extraParams = { leftOuts };\r\n      }\r\n      // add the unreachable walls with an extra hole\r\n      let { leftOuts } = extraParams;\r\n      if (leftOuts !== undefined && leftOuts.length !== 0) {\r\n        let l = leftOuts.pop();\r\n        queue.push(l);\r\n        let tmp = graphData.data[l].neighbors.filter((n) => walls.includes(n) && !queue.includes(n)); //possible extra holes\r\n        if (tmp.length > 0) queue.push(tmp[Math.floor(Math.random() * tmp.length)]);\r\n        extraParams = { leftOuts };\r\n      } else return { running: false, deltaWalls: [], deltaHoles: [], generationData };\r\n    }\r\n    let currentNode = queue.pop();\r\n    let nodeNeighbors = graphData.data[currentNode].neighbors;\r\n    //filter out\r\n    nodeNeighbors = nodeNeighbors.filter((neighbor) => !queue.includes(neighbor) && walls.includes(neighbor));\r\n    nodeNeighbors = nodeNeighbors.filter((neighbor) =>\r\n      graphData.data[neighbor].neighbors.reduce((res, secondNeighbor) => {\r\n        if (secondNeighbor === goal) return true;\r\n        if (secondNeighbor === currentNode) return res; //skip the father node\r\n        if (queue.includes(secondNeighbor) || !walls.includes(secondNeighbor)) return false; //if it has a neighbor who is in queue or a wall - don't add it\r\n        let cornerNeighbors = graphData.data[secondNeighbor].cornerNeighbors;\r\n        let filteredCorners = cornerNeighbors.filter((n) => !walls.includes(n));\r\n        if (filteredCorners.length > 1) return false;\r\n        return res;\r\n      }, true)\r\n    );\r\n    //\r\n    //add to queue\r\n    generationData.queue = [...queue.filter((n) => n !== currentNode), ...nodeNeighbors];\r\n    generationData.queue.sort((a, b) => graphData.data[a].value - graphData.data[b].value);\r\n\r\n    //make a hole\r\n    deltaHoles = [...deltaHoles, currentNode];\r\n  }\r\n  return { running, deltaHoles, deltaWalls, generationData, extraParams };\r\n}\r\n","export default function (graphData, generationData) {\r\n  let { start, goal, vertices, walls } = graphData;\r\n  let { firstRun, queue, running } = generationData;\r\n  let deltaWalls = [];\r\n  let deltaHoles = [];\r\n  if (firstRun) {\r\n    //first init on the first run\r\n    vertices.forEach((v) => {\r\n      if (v !== start && v !== goal) deltaWalls.push(v);\r\n    });\r\n    generationData.firstRun = false;\r\n    generationData.queue = [start];\r\n  } else {\r\n    let neighbors, filteredNeighbors, currentHead;\r\n    do {\r\n      //loop until you get valid queued cell\r\n\r\n      //at the end of the run, stop\r\n      if (queue.length === 0) return { running: false, deltaWalls: [], deltaHoles: [], generationData };\r\n\r\n      //get the last cell inserted\r\n      currentHead = queue.shift();\r\n      neighbors = graphData.data[currentHead].neighbors;\r\n      filteredNeighbors = neighbors.filter((n) => walls.includes(n));\r\n    } while (neighbors.length - filteredNeighbors.length > 1 && !neighbors.includes(goal));\r\n\r\n    neighbors.sort((a, b) => 0.75 - Math.random()); //randomize the DFS but not too much\r\n    queue = [...neighbors, ...queue.filter((n) => !neighbors.includes(n))];\r\n    deltaHoles = [...deltaHoles, currentHead];\r\n    generationData = { ...generationData, queue };\r\n  }\r\n  return { running, deltaHoles, deltaWalls, generationData };\r\n}\r\n","export default function BFS(graphState) {\r\n  let { edges, queue, visited, parentDict, running, goal } = graphState;\r\n  if (queue.length === 0) return graphState; // if no path\r\n  let tmpQueue = [...queue]; // every step will include all the level nodes\r\n  queue = [];\r\n  while (tmpQueue.length > 0) {\r\n    let currentVertex = tmpQueue.pop(); //get the next one (fifo)\r\n    // let currentVertex = queue.pop(); //get the next one (fifo)\r\n    let neighbors = edges[currentVertex];\r\n    neighbors = neighbors.filter((v) => !visited.includes(v) && !queue.includes(v)).sort((a, b) => a - b);\r\n    neighbors.forEach((v) => (parentDict[v] = currentVertex));\r\n    queue = [...neighbors, ...queue];\r\n    visited.push(currentVertex);\r\n    if (neighbors.includes(goal)) {\r\n      let goalNode = neighbors[neighbors.indexOf(goal)];\r\n      parentDict[goalNode] = currentVertex;\r\n      running = false;\r\n    }\r\n  }\r\n  return { edges, queue, visited, parentDict, running, goal };\r\n}\r\n","export default function DFS(graphState) {\r\n  let { edges, queue, visited, parentDict, running, goal } = graphState;\r\n  if (queue.length === 0) return { ...graphState, running: false }; // if no path\r\n  let currentVertex = queue.shift(); //get the next one (lifo)\r\n\r\n  let neighbors = edges[currentVertex];\r\n  neighbors = neighbors.filter((v) => !visited.includes(v));\r\n  let updatedQueue = neighbors.filter((v) => queue.includes(v));\r\n  if (updatedQueue.length > 0) queue = queue.filter((v) => !updatedQueue.includes(v)); //make room for the updated nodes\r\n  neighbors.forEach((v) => (parentDict[v] = currentVertex));\r\n\r\n  queue = [...neighbors, ...queue];\r\n  visited.push(currentVertex);\r\n  if (neighbors.includes(goal)) {\r\n    let goalNode = neighbors[neighbors.indexOf(goal)];\r\n    parentDict[goalNode] = currentVertex;\r\n    running = false;\r\n  }\r\n  return { edges, queue, visited, parentDict, running, goal };\r\n}\r\n","\r\nexport default function (graphState) {\r\n  let { edges, queue, visited, parentDict, running, goal, extraParams, data } = graphState;\r\n  if (queue.length === 0) return graphState; // if no path\r\n  let currentNode = queue.shift();\r\n\r\n  if (currentNode === goal) return { ...graphState, running: false };\r\n  visited.push(currentNode);\r\n  let nodeNeighbors = edges[currentNode];\r\n  //update the distance\r\n  nodeNeighbors.forEach((node) => {\r\n    if (visited.includes(node)) return;\r\n    let baseValue = extraParams[currentNode] | data[currentNode].value; //current node value\r\n    let addedValue = data[node].value; //target node value\r\n    if (extraParams[node] === undefined || extraParams[node] > baseValue + addedValue) {\r\n      //if the value is the smallest make the current node his parent\r\n      parentDict[node] = currentNode;\r\n      extraParams[node] = baseValue + addedValue;\r\n    }\r\n  });\r\n\r\n  //add to queue if not in the queue\r\n  nodeNeighbors.forEach((node) => {\r\n    if (visited.includes(node)) return;\r\n    if (!queue.includes(node)) queue.push(node);\r\n  });\r\n  queue.sort((a, b) => extraParams[a] - extraParams[b]);\r\n  return { edges, queue, visited, parentDict, running, goal };\r\n}\r\n","function generateGraph(nx, ny) {\r\n  let vertices = [];\r\n  let edges = {};\r\n  for (let r = 0; r < ny; r++)\r\n    for (let c = 0; c < nx; c++) {\r\n      let id = nx * r + c;\r\n      vertices.push(id); //Add ID first\r\n      if (edges[id] === undefined) edges[id] = [];\r\n      if (id - 1 >= 0 && (id - 1) % nx <= id % nx) {\r\n        edges[id].push(id - 1);\r\n        edges[id - 1].push(id);\r\n      }\r\n      if (id - nx >= 0) {\r\n        edges[id].push(id - nx);\r\n        edges[id - nx].push(id);\r\n      }\r\n    }\r\n\r\n  return { vertices, edges };\r\n}\r\n\r\nconst removeEdge = (e, node) => {\r\n  let edges = { ...e };\r\n  let neighbors = edges[node];\r\n  neighbors.forEach((n) => {\r\n    edges[n] = edges[n].filter((v) => v !== node);\r\n  });\r\n  edges[node] = [];\r\n  return edges;\r\n};\r\n\r\nconst restoreEdge = (e, neighbors, walls, node) => {\r\n  let edges = { ...e };\r\n  neighbors.forEach((n) => {\r\n    if (!walls.includes(n)) edges[n] = [...edges[n], node];\r\n  });\r\n  edges[node] = [...neighbors.filter((n) => !walls.includes(n))];\r\n  return edges;\r\n};\r\n\r\nexport { generateGraph, removeEdge, restoreEdge };\r\n","/*\r\n    graphData: {\r\n      vertices: [],\r\n      edges: [],\r\n      data: {},\r\n      parentDict: {},\r\n      visited: [],\r\n      queue: [],\r\n      goal: -1,\r\n      running: false,\r\n    },\r\n    solveSpeed: 200,\r\n    wall: [],\r\n    start: 128,\r\n    end: -1,\r\n    algorithms: {\r\n      solve: getSolverNames()[0],\r\n      generate: undefined,\r\n      solveArr: getSolverNames(),\r\n    },\r\n  },\r\n*/\r\n\r\nimport { solvers, generators } from \"../../AlgorithmManager\";\r\nimport { removeEdge, restoreEdge } from \"../../GraphLogic\";\r\n// import { combineReducers } from \"redux\";\r\nconst MAX_COST = 100;\r\nexport default {\r\n  step: (state) => {\r\n    if (state.paused) return;\r\n    do {\r\n      if (state.graphData.queue.length === 0) state.graphData.running = false;\r\n      //draw path at the end\r\n      if (state.graphData.drawPath) {\r\n        if (state.graphData.queue.length > 0) {\r\n          let pathTile = state.graphData.queue.pop();\r\n          if (state.graphData.data[pathTile].type === \"visited\") state.graphData.data[pathTile].type = \"path\";\r\n        } else return;\r\n        if (state.skip) continue;\r\n        return;\r\n      }\r\n      let f = solvers[state.algorithms.solve];\r\n      let res = f(state.graphData);\r\n\r\n      if (!res.running) res = { ...res, running: true, drawPath: true };\r\n      state.graphData = { ...state.graphData, ...res };\r\n      // when search is finished//////////\r\n      if (res.drawPath) {\r\n        state.graphData.queue = []; //empty it and it will be repurposed for the path\r\n        if (state.graphData.goal !== -1 && state.graphData.parentDict[state.graphData.goal] !== undefined) {\r\n          let current = state.graphData.goal;\r\n          while (state.graphData.parentDict[current] !== undefined) {\r\n            state.graphData.queue = [...state.graphData.queue, current];\r\n            current = state.graphData.parentDict[current];\r\n          }\r\n        }\r\n      }\r\n      /////////////////////\r\n      //change each cell type to visited if visited (duplication will not affect performance)\r\n      state.graphData.visited.forEach((v) => {\r\n        if (state.graphData.data[v].type === \"\") state.graphData.data[v].type = \"visited\";\r\n      });\r\n    } while (state.skip && (state.graphData.running || state.graphData.drawPath));\r\n  },\r\n\r\n  placeStart: (state, action) => {\r\n    let id = action.payload;\r\n    let oldVal = state.graphData.data[id];\r\n    state.graphData.start = id;\r\n    state.graphData.data[id] = { ...oldVal, type: \"start\" };\r\n  },\r\n\r\n  placeEnd: (state, action) => {\r\n    let id = action.payload;\r\n    let oldVal = state.graphData.data[id];\r\n    state.graphData.goal = id;\r\n    state.graphData.data[id] = { ...oldVal, type: \"end\" };\r\n  },\r\n  placeNode: (state, action) => {\r\n    let { type, id } = action.payload.id;\r\n    let oldVal = state.graphData.data[id];\r\n    state[type] = id;\r\n    state.graphData.data[id] = { ...oldVal, type };\r\n  },\r\n\r\n  solve: (state) => {\r\n    // state.graphData.clean = false;\r\n    state.generationData.running = false;\r\n    // state.graphData.running = true;\r\n    state.graphData = {\r\n      ...state.graphData,\r\n      clean: false,\r\n      running: true,\r\n      extraParams: {},\r\n    };\r\n  },\r\n  generate: (state, action) => {\r\n    state.generationData.weighted = action.payload;\r\n    state.weightCheck = action.payload;\r\n    state.graphData.clean = false;\r\n    state.generationData = {\r\n      ...state.generationData,\r\n      extraParams: {},\r\n      running: true,\r\n      firstRun: true,\r\n      queue: [state.graphData.start],\r\n    };\r\n  },\r\n  setIntervalId: (state, action) => {\r\n    let { type, value } = action.payload;\r\n    console.log(\"Set interval - \", type, value);\r\n    state.intervalId[type] = value;\r\n  },\r\n  pause: (state) => {\r\n    state.paused = true;\r\n  },\r\n  reset: (state) => {\r\n    console.log(\"reset\");\r\n    if (state.selectedTile !== undefined) {\r\n      state.graphData.data[state.selectedTile].type = state.graphData.data[state.selectedTile].type.replace(\"-s\", \"\");\r\n      state.selectedTile = undefined;\r\n    }\r\n\r\n    if (!state.graphData.clean) {\r\n      state.graphData.vertices.forEach((v) => {\r\n        //Loop over visited & path\r\n        let { type } = state.graphData.data[v];\r\n        if (!state.generationData.weighted) state.graphData.data[v].value = 0;\r\n        if (type !== \"start\" && type !== \"end\" && type !== \"wall\")\r\n          state.graphData.data[v] = { ...state.graphData.data[v], type: \"\" };\r\n      });\r\n    }\r\n    clearInterval(state.intervalId.solve);\r\n    clearInterval(state.intervalId.generate);\r\n    state.intervalId = {\r\n      solve: undefined,\r\n      generate: undefined,\r\n    };\r\n    state.graphData = {\r\n      ...state.graphData,\r\n      clean: true,\r\n      running: false,\r\n      drawPath: false,\r\n      queue: [state.graphData.start],\r\n      visited: [],\r\n      parentDict: {},\r\n    };\r\n    state.generationData = {\r\n      ...state.generationData,\r\n      running: false,\r\n      queue: [],\r\n      firstRun: true,\r\n      extraParams: {},\r\n    };\r\n    state.paused = false;\r\n  },\r\n  setWeightCheck: (state, action) => {\r\n    state.weightCheck = action.payload;\r\n  },\r\n  toggleSkip: (state) => {\r\n    state.skip = !state.skip;\r\n  },\r\n  resume: (state) => {\r\n    state.paused = false;\r\n  },\r\n  clear: (state) => {\r\n    state.weightCheck = false;\r\n    state.generationData.weighted = false;\r\n    state.graphData.walls = [];\r\n    state.graphData.vertices.forEach((v) => {\r\n      state.graphData.edges[v] = state.graphData.data[v].neighbors;\r\n      state.graphData.data[v].value = -1;\r\n      if (state.graphData.data[v].type !== \"start\" && state.graphData.data[v].type !== \"end\") state.graphData.data[v].type = \"\";\r\n    });\r\n  },\r\n  updateSpeed: (state, action) => {\r\n    state.solveSpeed = action.payload;\r\n  },\r\n  selectTile: (state, action) => {\r\n    if (state.graphData.running || state.generationData.running) return;\r\n    let id = action.payload;\r\n    if (state.selectedTile !== undefined) {\r\n      state.graphData.data[state.selectedTile].type = state.graphData.data[state.selectedTile].type.replace(\"-s\", \"\");\r\n      state.selectedTile = undefined;\r\n    }\r\n    if (id === state.graphData.start) state.graphData.data[action.payload].type = \"start-s\";\r\n    else state.graphData.data[action.payload].type = \"end-s\";\r\n    state.selectedTile = id;\r\n  },\r\n  wallATile: (state, action) => {\r\n    let { type } = state.graphData.data[action.payload];\r\n    if (type !== \"\" || state.selectedTile !== undefined) return;\r\n\r\n    state.graphData.walls.push(action.payload);\r\n    state.graphData.data[action.payload].type = \"wall\";\r\n    state.graphData.edges = { ...removeEdge(state.graphData.edges, action.payload) };\r\n    state.graphData.clean = false;\r\n  },\r\n\r\n  removeAWall: (state, action) => {\r\n    let { type, neighbors } = state.graphData.data[action.payload];\r\n    if (type !== \"wall\" || state.selectedTile !== undefined) return;\r\n    state.graphData.walls = state.graphData.walls.filter((v) => v !== action.payload);\r\n    state.graphData.data[action.payload].type = \"\";\r\n    state.graphData.edges = { ...restoreEdge(state.graphData.edges, neighbors, state.graphData.walls, action.payload) };\r\n    if (state.graphData.walls.length === 0) state.graphData.clean = true;\r\n  },\r\n  toggleWall: (state, action) => {\r\n    let { type, neighbors } = state.graphData.data[action.payload];\r\n    let id = action.payload;\r\n    if (type === \"wall\") {\r\n      state.graphData.data[id].type = \"\";\r\n      state.graphData = {\r\n        ...state.graphData,\r\n        walls: state.graphData.walls.filter((v) => v !== id),\r\n        edges: { ...restoreEdge(state.graphData.edges, neighbors, state.graphData.walls, id) },\r\n      };\r\n      if (state.graphData.walls.length === 0) state.graphData.clean = true;\r\n      //\r\n      //\r\n    } else if (type !== \"start\" && type !== \"end\" && state.selectedTile === undefined) {\r\n      state.graphData.walls.push(id);\r\n      state.graphData = { ...state.graphData, clean: false, edges: { ...removeEdge(state.graphData.edges, id) } };\r\n      state.graphData.data[id].type = \"wall\";\r\n    }\r\n\r\n    //Change start/end node\r\n    if (state.selectedTile !== undefined) {\r\n      let type, oldId;\r\n\r\n      if (state.selectedTile === state.graphData.start) {\r\n        oldId = state.graphData.start;\r\n        state.graphData.start = id;\r\n        type = \"start\";\r\n      } else {\r\n        oldId = state.graphData.goal;\r\n        state.graphData.goal = id;\r\n        type = \"end\";\r\n      }\r\n      state.graphData.data[id] = { ...state.graphData.data[id], type, value: 0 };\r\n      state.graphData.data[oldId] = { ...state.graphData.data[oldId], type: \"\", value: Math.floor(MAX_COST * Math.random()) };\r\n      state.selectedTile = undefined;\r\n    }\r\n  },\r\n\r\n  setAlgorithm: (state, action) => {\r\n    let { value, type } = action.payload;\r\n    let algorithmDict;\r\n    switch (type) {\r\n      case \"solve\":\r\n        algorithmDict = solvers;\r\n        break;\r\n      default:\r\n        algorithmDict = generators;\r\n    }\r\n    if (algorithmDict[value] !== undefined) state.algorithms[type] = value;\r\n  },\r\n\r\n  generateMaze: (state, action) => {\r\n    if (state.paused) return;\r\n    do {\r\n      if (state.generationData.weighted && state.generationData.firstRun)\r\n        state.graphData.vertices.forEach((v) => {\r\n          if (v !== state.graphData.start && v !== state.graphData.goal) {\r\n            state.graphData.data[v].value = Math.floor(Math.random() * MAX_COST); //better than just selecting random queue\r\n          } else {\r\n            state.graphData.data[v].value = 0;\r\n          }\r\n        });\r\n      let f = generators[state.algorithms.generate];\r\n      let { deltaWalls, deltaHoles, running, generationData, extraParams } = f(state.graphData, state.generationData);\r\n      state.graphData.walls = [...state.graphData.walls.filter((v) => !deltaHoles.includes(v)), ...deltaWalls];\r\n      deltaWalls.forEach((w) => {\r\n        if (w === state.graphData.start || w === state.graphData.goal) return;\r\n        state.graphData.data[w].type = \"wall\";\r\n        state.graphData.edges = { ...removeEdge(state.graphData.edges, w) };\r\n      });\r\n\r\n      deltaHoles.forEach((n) => {\r\n        if (n === state.graphData.start || n === state.graphData.goal) return;\r\n\r\n        state.graphData.data[n].type = \"\";\r\n        state.graphData.edges = {\r\n          ...restoreEdge(state.graphData.edges, state.graphData.data[n].neighbors, state.graphData.walls, n),\r\n        };\r\n      });\r\n      state.generationData = { ...generationData, running, extraParams };\r\n    } while (state.skip && state.generationData.running);\r\n  },\r\n\r\n  updateGraph: (state, action) => {\r\n    //TODO: Optimize the code\r\n    let { vertices, edges } = action.payload;\r\n    state.graphData.vertices = vertices;\r\n    let randomStart = Math.floor(Math.random() * vertices.length); //TODO: clean this\r\n\r\n    state.graphData.start = randomStart;\r\n    state.graphData.data[randomStart] = { type: \"start\", neighbors: edges[randomStart], value: -1 };\r\n    state.graphData.queue = [randomStart];\r\n    randomStart = Math.floor(Math.random() * vertices.length); //temp\r\n    state.graphData.goal = randomStart;\r\n    state.graphData.data[randomStart] = { type: \"end\", neighbors: edges[randomStart], value: -1 };\r\n    state.graphData.goal = randomStart;\r\n    state.graphData.edges = edges;\r\n    vertices.forEach((v) => {\r\n      if (state.graphData.data[v] === undefined) state.graphData.data[v] = { type: \"\", neighbors: edges[v], value: -1 };\r\n    });\r\n    //new\r\n    vertices.forEach((v) => {\r\n      //get neighbors of neighbors\r\n      let cornerNeighbors = state.graphData.data[v].neighbors\r\n        .reduce((res, n) => [...res, ...state.graphData.data[n].neighbors], [])\r\n        .sort();\r\n\r\n      //count duplicates\r\n      cornerNeighbors = cornerNeighbors.reduce((res, n) => {\r\n        res[n] = (res[n] || 0) + 1;\r\n        return res;\r\n      }, {});\r\n\r\n      //map to array all 2 duplicates\r\n      cornerNeighbors = Object.keys(cornerNeighbors).reduce((res, n) => {\r\n        if (cornerNeighbors[n] === 2 && n != v) res = [...res, n * 1];\r\n        return res;\r\n      }, []);\r\n      let newData = { ...state.graphData.data[v], cornerNeighbors };\r\n      state.graphData.data[v] = newData;\r\n    });\r\n  },\r\n};\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getSolverNames, getMazeGenerators } from \"../AlgorithmManager\";\r\nimport graphReducer from \"./reducers/reducers\";\r\nexport const graphSlice = createSlice({\r\n  name: \"graph\",\r\n  initialState: {\r\n    selectedTile: undefined,\r\n    weightCheck: false,\r\n    skip: false,\r\n    graphData: {\r\n      clean: true,\r\n      vertices: [],\r\n      edges: [],\r\n      data: {},\r\n      parentDict: {},\r\n      visited: [],\r\n      queue: [],\r\n      drawPath: false,\r\n      goal: -1,\r\n      start: -1,\r\n      running: false,\r\n      walls: [],\r\n      extraParams: {},\r\n      //tmp\r\n      current: undefined,\r\n    },\r\n    generationData: {\r\n      weighted: false,\r\n      running: false,\r\n      queue: [],\r\n      firstRun: true,\r\n      extraParams: {},\r\n    },\r\n    solveSpeed: 60,\r\n    start: 128,\r\n    end: -1,\r\n\r\n    paused: false,\r\n    intervalId: {\r\n      solve: undefined,\r\n      generate: undefined,\r\n    },\r\n    algorithms: {\r\n      solve: getSolverNames()[0],\r\n      generate: getMazeGenerators()[0],\r\n      solveArr: getSolverNames(),\r\n    },\r\n  },\r\n  reducers: graphReducer,\r\n});\r\n\r\nexport const {\r\n  step,\r\n  solve,\r\n  generate,\r\n  reset,\r\n  pause,\r\n  resume,\r\n  clear,\r\n  wallATile,\r\n  generateMaze,\r\n  placeStart,\r\n  updateGraph,\r\n  removeAWall,\r\n  toggleSkip,\r\n  setWeightCheck,\r\n  updateSpeed,\r\n  setIntervalId,\r\n  setAlgorithm,\r\n  toggleWall,\r\n  selectTile,\r\n} = graphSlice.actions;\r\n\r\nexport default graphSlice.reducer;\r\n","import React from \"react\";\r\nimport { FormControl, InputLabel, Select, Button, MenuItem, FormControlLabel, Checkbox } from \"@material-ui/core\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { solve, reset, step, setAlgorithm, setIntervalId } from \"../../logic/redux/graphSlice\";\r\nimport { getSolverNames } from \"../../logic/AlgorithmManager\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\n\r\nconst getOptionsFromArray = (arr) => {\r\n  return arr.map((v) => (\r\n    <MenuItem key={v} value={v}>\r\n      {v}\r\n    </MenuItem>\r\n  ));\r\n};\r\n\r\nconst solveHelper = (dispatch, delay, runSolver, oldTimeout) => {\r\n  clearInterval(oldTimeout);\r\n  if (!runSolver) return;\r\n  let intervalId = setInterval(() => {\r\n    dispatch(step());\r\n  }, delay);\r\n  return intervalId;\r\n};\r\n\r\nconst SolveControl = (props) => {\r\n  const selectedSolver = useSelector((state) => state.graph.algorithms.solve);\r\n  const runSpeed = useSelector((state) => state.graph.solveSpeed);\r\n  const runSolver = useSelector((state) => state.graph.graphData.running);\r\n  const runGenerator = useSelector((state) => state.graph.generationData.running);\r\n  const oldTimeout = useSelector(\r\n    (state) => state.graph.intervalId.solve,\r\n    () => true\r\n  );\r\n  const dispatch = useDispatch();\r\n  let intervalId = solveHelper(dispatch, runSpeed, runSolver, oldTimeout);\r\n  dispatch(setIntervalId({ type: \"solve\", value: intervalId }));\r\n\r\n  return (\r\n    <div className=\"sub-section maze-solvers\">\r\n      <FormControl variant=\"outlined\">\r\n        <InputLabel>Solvers</InputLabel>\r\n        <Select\r\n          disabled={runSolver || runGenerator}\r\n          name=\"solvers\"\r\n          id=\"solvers\"\r\n          value={selectedSolver}\r\n          label=\"Solvers\"\r\n          onChange={(e) => {\r\n            dispatch(setAlgorithm({ value: e.target.value, type: \"solve\" }));\r\n          }}\r\n        >\r\n          {getOptionsFromArray(getSolverNames())}\r\n        </Select>\r\n      </FormControl>\r\n      <Button\r\n        variant=\"contained\"\r\n        disabled={runSolver || runGenerator}\r\n        color=\"primary\"\r\n        // startIcon={<PlayArrowIcon/>}\r\n        startIcon={<SendIcon />}\r\n        onClick={(e) => {\r\n          dispatch(reset());\r\n          dispatch(solve());\r\n        }}\r\n      >\r\n        Solve\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        startIcon={<RefreshIcon />}\r\n        onClick={(e) => {\r\n          dispatch(reset());\r\n        }}\r\n      >\r\n        Reset\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SolveControl;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getMazeGenerators } from \"../../logic/AlgorithmManager\";\r\nimport { Button, Select, MenuItem, FormControl, InputLabel, Box, Grid, Checkbox, FormControlLabel } from \"@material-ui/core\";\r\nimport { setAlgorithm, generateMaze, clear, generate, setIntervalId, reset, setWeightCheck } from \"../../logic/redux/graphSlice\";\r\nimport BuildIcon from \"@material-ui/icons/Build\";\r\nimport FitnessCenterIcon from \"@material-ui/icons/FitnessCenter\";\r\n\r\nconst getOptionsFromArray = (arr) => {\r\n  return arr.map((v) => (\r\n    <MenuItem key={v} value={v}>\r\n      {v}\r\n    </MenuItem>\r\n  ));\r\n};\r\n\r\nconst generateHelper = (dispatch, runGenerator, oldTimeout) => {\r\n  clearInterval(oldTimeout);\r\n  if (!runGenerator) return;\r\n  let intervalId = setInterval(() => {\r\n    dispatch(generateMaze());\r\n  }, 10);\r\n  return intervalId;\r\n};\r\n\r\nexport default (props) => {\r\n  const currentGenerator = useSelector((state) => state.graph.algorithms.generate);\r\n  const isWeighted = useSelector((state) => state.graph.weightCheck);\r\n  const runSolver = useSelector((state) => state.graph.graphData.running);\r\n  const runGenerator = useSelector((state) => state.graph.generationData.running);\r\n  const oldTimeout = useSelector(\r\n    (state) => state.graph.intervalId.generate,\r\n    () => true\r\n  );\r\n  const dispatch = useDispatch();\r\n  let intervalId = generateHelper(dispatch, runGenerator, oldTimeout);\r\n  dispatch(setIntervalId({ type: \"generate\", value: intervalId }));\r\n  return (\r\n    <div className=\"sub-section maze-generation\">\r\n      <FormControl variant=\"outlined\">\r\n        <InputLabel>Generators</InputLabel>\r\n        <Select\r\n          name=\"generators\"\r\n          disabled={runSolver || runGenerator}\r\n          id=\"generators\"\r\n          value={currentGenerator}\r\n          label=\"Generators\"\r\n          onChange={(e) => {\r\n            dispatch(setAlgorithm({ value: e.target.value, type: \"generate\" }));\r\n          }}\r\n        >\r\n          {getOptionsFromArray(getMazeGenerators())}\r\n        </Select>\r\n      </FormControl>\r\n      <Button\r\n        disabled={runSolver || runGenerator}\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        startIcon={<BuildIcon />}\r\n        onClick={(e) => {\r\n          dispatch(reset());\r\n          dispatch(clear());\r\n          dispatch(generate(isWeighted));\r\n        }}\r\n      >\r\n        Generate\r\n      </Button>\r\n      <FormControlLabel\r\n        id=\"weight-checkbox\"\r\n        control={\r\n          <Checkbox\r\n            id=\"weight-checkbox\"\r\n            value=\"weight\"\r\n            checked={isWeighted}\r\n            disabled={runGenerator}\r\n            onChange={(e, state) => dispatch(setWeightCheck(state))}\r\n          />\r\n        }\r\n        label=\"weighted\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./Tile.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { wallATile, removeAWall, toggleWall, selectTile } from \"../../logic/redux/graphSlice\";\r\nconst TILE = 25;\r\nconst getCurrentCSS = (type) => {\r\n  let cls = \"tile \";\r\n  switch (type) {\r\n    case \"start\":\r\n      return cls + \"tile-start\";\r\n    case \"end\":\r\n      return cls + \"tile-end\";\r\n    case \"start-s\":\r\n      return cls + \"tile-start selected\";\r\n    case \"end-s\":\r\n      return cls + \"tile-end selected\";\r\n    case \"visited\":\r\n      return cls + \"tile-visited\";\r\n    case \"current\":\r\n      return cls + \"tile-current\";\r\n    case \"path\":\r\n      return cls + \"tile-path\";\r\n    case \"wall\":\r\n      return cls + \"tile-wall\";\r\n    case \"current\":\r\n      return cls + \"tile-current\";\r\n    default:\r\n      return cls;\r\n  }\r\n};\r\n// const toggleWall = (dispatch, type, id) => {\r\n//   switch (type) {\r\n//     case \"wall\":\r\n//       dispatch(removeAWall(id));\r\n//       break;\r\n//     default:\r\n//       dispatch(wallATile(id));\r\n//   }\r\n// };\r\n\r\nconst Tile = (props) => {\r\n  const dispatch = useDispatch();\r\n  let cellState = useSelector(\r\n    (state) => state.graph.graphData.data[props.id],\r\n    (oldData, newData) => oldData.type === newData.type && oldData.value === newData.value\r\n  );\r\n  let weighted = useSelector(\r\n    (state) => state.graph.generationData.weighted,\r\n    () => true\r\n  );\r\n  let styles = { width: TILE, height: TILE };\r\n  return (\r\n    <td\r\n      id={props.id}\r\n      key={props.id}\r\n      className={getCurrentCSS(cellState.type)}\r\n      style={styles}\r\n      onMouseEnter={(e) => {\r\n        if (e.buttons === 1) dispatch(toggleWall(props.id));\r\n      }}\r\n      onPointerDown={(e) => {\r\n        if (cellState.type === \"start\" || cellState.type === \"end\") dispatch(selectTile(props.id));\r\n        else dispatch(toggleWall(props.id));\r\n      }}\r\n    >\r\n      {weighted && (cellState.type === \"\" || cellState.type === \"visited\") && cellState.value !== -1\r\n        ? cellState.value\r\n        : undefined}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default Tile;\r\nexport { TILE };\r\n","import React from \"react\";\r\nimport \"./Legend.css\";\r\nimport { TILE } from \"../GraphArea/Tile\";\r\n\r\nexport default function () {\r\n  return (\r\n    <div className=\"legend-wrapper\">\r\n      <ul className=\"sub-section legend\">\r\n        <li>\r\n          <p>Start</p>\r\n          <div style={{ width: TILE, height: TILE }} className=\"tile-start\"></div>\r\n        </li>\r\n        <li>\r\n          <p>Goal</p>\r\n          <div style={{ width: TILE, height: TILE }} className=\"tile-end\"></div>\r\n        </li>\r\n        <li>\r\n          <p>Wall</p>\r\n          <div style={{ width: TILE, height: TILE }} className=\"tile-wall\"></div>\r\n        </li>\r\n        {/* <li> */}\r\n        {/* <p>Path</p> */}\r\n        {/* <div style={{ width: TILE, height: TILE }} className=\"tile-path\"></div> */}\r\n        {/* </li> */}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./ControlsMenu.css\";\r\nimport { Slider, Button, Typography, Grid, FormControlLabel, Checkbox } from \"@material-ui/core\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateSpeed, pause, reset, clear, resume, toggleSkip } from \"../../logic/redux/graphSlice\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport PauseIcon from \"@material-ui/icons/Pause\";\r\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nexport default (props) => {\r\n  const dispatch = useDispatch();\r\n  const paused = useSelector((state) => state.graph.paused);\r\n  const skip = useSelector((state) => state.graph.skip);\r\n  const solveSpeed = useSelector((state) => state.graph.solveSpeed);\r\n\r\n  let icon = paused ? <PlayArrowIcon /> : <PauseIcon />;\r\n\r\n  return (\r\n    <div className=\"sub-section controls-menu\">\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        startIcon={icon}\r\n        onClick={(e) => {\r\n          if (paused) dispatch(resume());\r\n          else dispatch(pause());\r\n        }}\r\n      >\r\n        {paused ? \"Resume\" : \"Pause\"}\r\n      </Button>\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        startIcon={<DeleteIcon />}\r\n        color=\"secondary\"\r\n        onClick={(e) => {\r\n          dispatch(reset());\r\n          dispatch(clear());\r\n        }}\r\n      >\r\n        Clear\r\n      </Button>\r\n      <div>\r\n        <Typography gutterBottom>Solve Speed</Typography>\r\n        <Slider\r\n          onChangeCommitted={(e, v) => dispatch(updateSpeed(1010 - v))} //TODO: remove hard coded values\r\n          defaultValue={1010 - solveSpeed}\r\n          step={50}\r\n          min={500}\r\n          max={1000}\r\n          aria-labelledby=\"discrete-slider\"\r\n          valueLabelDisplay=\"auto\"\r\n          valueLabelFormat={(v) => 1010 - v}\r\n          marks\r\n        />\r\n      </div>\r\n      <FormControlLabel\r\n        className=\"skip-control\"\r\n        control={<Checkbox value=\"skip\" checked={skip} onChange={() => dispatch(toggleSkip())} />}\r\n        label=\"skip animation\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./TopMenu.css\";\r\nimport SolveControl from \"./SolveControl\";\r\nimport GeneratorControl from \"./GeneratorControl\";\r\nimport { TILE } from \"../GraphArea/Tile\";\r\nimport Legend from \"../LegendArea/Legend\";\r\nimport ControlsMenu from \"../ControlsMenu/ControlsMenu\";\r\nexport default (props) => {\r\n  return (\r\n    <div className=\"top-menu\">\r\n      <GeneratorControl />\r\n\r\n      <SolveControl />\r\n      <ControlsMenu/>\r\n      </div>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\nimport \"./GraphArea.css\";\r\nimport Tile, { TILE } from \"./Tile\";\r\nimport { connect } from \"react-redux\";\r\nimport { placeStart, updateGraph } from \"../../logic/redux/graphSlice\";\r\nimport { generateGraph } from \"../../logic/GraphLogic\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  let vertices = state.graph.graphData.vertices;\r\n  return { vertices };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    placeStart: (vertex) => dispatch(placeStart(vertex)),\r\n    updateGraph: (nx, ny) => {\r\n      updateGraph(generateGraph(nx, ny));\r\n    },\r\n  };\r\n};\r\n\r\nclass GraphArea extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { rows: 0, columns: 0 };\r\n  }\r\n  componentDidMount() {\r\n    this.updateSizes();\r\n  }\r\n\r\n  updateSizes = () => {\r\n    let graphArea = document.getElementById(\"graph-area2\");\r\n    let graphW = graphArea.clientWidth;\r\n    let graphH = graphArea.clientHeight;\r\n    // let l = Math.sqrt((graphW * graphH) / 1200);\r\n    let l = TILE + 2; //+2 for border\r\n    let columns = Math.floor(graphW / l);\r\n    let rows = Math.floor(graphH / l);\r\n    let tileW = graphW / columns - 2;\r\n    let tileH = graphH / rows - 2;\r\n    this.setState({ graphW, graphH, columns, rows, tileW, tileH });\r\n    this.props.onLoad(columns, rows);\r\n    this.props.updateGraph(columns, rows);\r\n  };\r\n\r\n  getTiles = () => {\r\n    let tiles = [];\r\n    this.props.vertices.forEach((v) => {});\r\n    for (let r = 0; r < Math.floor(this.props.vertices.length / this.state.columns); r++) {\r\n      let cells = [];\r\n      for (let c = 0; c < Math.floor(this.props.vertices.length / this.state.rows); c++) {\r\n        let id = this.state.columns * r + c;\r\n        cells.push(<Tile id={id} key={id} />);\r\n      }\r\n      tiles.push(<tr key={\"row-\" + r}>{cells}</tr>);\r\n    }\r\n    return tiles;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"graph-area\" id=\"graph-area2\" onContextMenu={(e) => e.preventDefault()}>\r\n        <table>\r\n          <tbody>{this.getTiles()}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphArea);\r\n","import React from \"react\";\r\nimport TopMenu from \"./components/TopMenu/TopMenu\";\r\nimport \"./App.css\";\r\nimport GraphArea from \"./components/GraphArea/GraphArea\";\r\nimport { generateGraph } from \"./logic/GraphLogic\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateGraph } from \"./logic/redux/graphSlice\";\r\nimport ControlsMenu from \"./components/ControlsMenu/ControlsMenu\";\r\nimport Legend from \"./components/LegendArea/Legend\";\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className=\"App\">\r\n      <TopMenu />\r\n      <GraphArea onLoad={(nx, ny) => dispatch(updateGraph(generateGraph(nx, ny)))} />\r\n      <Legend />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport graphReducer from \"./graphSlice\";\r\nexport default configureStore({\r\n  reducer: {\r\n    graph: graphReducer,\r\n    middleware:getDefaultMiddleware({immutableCheck:false,serializableCheck:false})\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./logic/redux/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}