{"version":3,"sources":["logic/maze/random.js","logic/AlgorithmManager.js","logic/solvers/BFS.js","logic/solvers/DFS.js","logic/GraphLogic.js","logic/redux/reducers/reducers.js","logic/redux/graphSlice.js","components/TopMenu/SolveControl.js","components/TopMenu/GeneratorControl.js","components/TopMenu/TopMenu.js","components/GraphArea/Tile.js","components/GraphArea/GraphArea.js","components/ControlsMenu/ControlsMenu.js","App.js","logic/redux/store.js","serviceWorker.js","index.js"],"names":["generators","Random","graphData","start","goal","vertices","walls","forEach","v","Math","random","push","solvers","BFS","graphState","edges","queue","visited","parentDict","running","length","tmpQueue","currentVertex","pop","neighbors","filter","includes","goalNode","indexOf","DFS","shift","updatedQueue","getMazeGenerators","names","n","getSolverNames","generateGraph","nx","ny","r","c","id","undefined","removeEdge","e","node","step","state","paused","drawPath","pathTile","data","type","res","f","algorithms","solve","current","placeStart","action","payload","oldVal","placeEnd","GraphData","placeNode","setTimeoutId","timeoutId","pause","reset","resume","clear","updateSpeed","solveSpeed","wallATile","wall","removeAWall","restoreEdge","setAlgorithm","algorithmDict","value","generateMaze","generate","w","updateGraph","randomStart","floor","graphSlice","createSlice","name","initialState","end","solveArr","reducers","graphReducer","actions","SolveControl","props","selectedSolver","useSelector","graph","runSpeed","runSolver","oldTimeout","dispatch","useDispatch","delay","clearInterval","setInterval","solveHelper","className","FormControl","variant","InputLabel","Select","label","onChange","target","map","MenuItem","key","Button","color","onClick","currentGenerator","GeneratorControl","getCurrentCSS","cls","toggleWall","Tile","cellState","styles","width","height","style","onMouseEnter","buttons","onPointerDown","GraphArea","updateSizes","graphArea","document","getElementById","graphW","clientWidth","graphH","clientHeight","columns","TILE","rows","tileW","tileH","setState","onLoad","getTiles","tiles","cells","this","Component","connect","vertex","Slider","onChangeCommitted","defaultValue","min","max","aria-labelledby","marks","App","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.32ad04c0.chunk.js","sourcesContent":["export default function (graphData) {\r\n  let { start, goal, vertices } = graphData;\r\n  let walls = [];\r\n  vertices.forEach((v) => {\r\n    if (Math.random() > 0.7 && v !== start && v !== goal) walls.push(v);\r\n  });\r\n  return walls;\r\n}\r\n","import BFS from \"./solvers/BFS\";\r\nimport DFS from \"./solvers/DFS\";\r\nimport Random from \"./maze/random\";\r\n\r\nconst generators = { Random };\r\n\r\nconst solvers = {\r\n  BFS,\r\n  DFS,\r\n};\r\n\r\nfunction getMazeGenerators() {\r\n  let names = [];\r\n  for (let n in generators) names.push(n);\r\n  return names;\r\n}\r\n\r\nfunction getSolverNames() {\r\n  let names = [];\r\n  for (let n in solvers) names.push(n);\r\n  return names;\r\n}\r\n\r\nexport { getMazeGenerators, getSolverNames, solvers, generators };\r\n","export default function BFS(graphState) {\r\n  let { edges, queue, visited, parentDict, running, goal } = graphState;\r\n  if (queue.length === 0) return graphState; // if no path\r\n  let tmpQueue = [...queue]; // every step will include all the level nodes\r\n  queue = [];\r\n  while (tmpQueue.length > 0) {\r\n    let currentVertex = tmpQueue.pop(); //get the next one (fifo)\r\n    let neighbors = edges[currentVertex];\r\n    neighbors = neighbors.filter((v) => !visited.includes(v) && !queue.includes(v));\r\n    neighbors.forEach((v) => (parentDict[v] = currentVertex));\r\n    queue = [...neighbors, ...queue];\r\n    visited.push(currentVertex);\r\n    if (neighbors.includes(goal)) {\r\n      let goalNode = neighbors[neighbors.indexOf(goal)];\r\n      parentDict[goalNode] = currentVertex;\r\n      running = false;\r\n    }\r\n  }\r\n  return { edges, queue, visited, parentDict, running, goal };\r\n}\r\n","export default function DFS(graphState) {\r\n  let { edges, queue, visited, parentDict, running, goal } = graphState;\r\n  if (queue.length === 0) return { ...graphState, running: false }; // if no path\r\n  let currentVertex = queue.shift(); //get the next one (lifo)\r\n  let neighbors = edges[currentVertex];\r\n  neighbors = neighbors.filter((v) => !visited.includes(v));\r\n  let updatedQueue = neighbors.filter((v) => queue.includes(v));\r\n  if (updatedQueue.length > 0) queue = queue.filter((v) => !updatedQueue.includes(v)); //make room for the updated nodes\r\n  neighbors.forEach((v) => (parentDict[v] = currentVertex));\r\n\r\n  queue = [...neighbors, ...queue];\r\n  visited.push(currentVertex);\r\n  if (neighbors.includes(goal)) {\r\n    let goalNode = neighbors[neighbors.indexOf(goal)];\r\n    parentDict[goalNode] = currentVertex;\r\n    running = false;\r\n  }\r\n  return { edges, queue, visited, parentDict, running, goal };\r\n}\r\n","function generateGraph(nx, ny) {\r\n  let vertices = [];\r\n  let edges = {};\r\n  for (let r = 0; r < ny; r++)\r\n    for (let c = 0; c < nx; c++) {\r\n      let id = nx * r + c;\r\n      vertices.push(id); //Add ID first\r\n      if (edges[id] === undefined) edges[id] = [];\r\n      if (id - 1 >= 0 && (id - 1) % nx <= id % nx) {\r\n        edges[id].push(id - 1);\r\n        edges[id - 1].push(id);\r\n      }\r\n      if (id - nx >= 0) {\r\n        edges[id].push(id - nx);\r\n        edges[id - nx].push(id);\r\n      }\r\n    }\r\n\r\n  return { vertices, edges };\r\n}\r\n\r\nconst removeEdge = (e, node) => {\r\n  let edges = { ...e };\r\n  let neighbors = edges[node];\r\n  neighbors.forEach((n) => {\r\n    edges[n] = edges[n].filter((v) => v !== node);\r\n  });\r\n  edges[node] = [];\r\n  return edges;\r\n};\r\n\r\nconst restoreEdge = (e, neighbors, walls, node) => {\r\n  let edges = { ...e };\r\n\r\n  neighbors.forEach((n) => {\r\n    if (!walls.includes(n)) edges[n] = [...edges[n], node];\r\n  });\r\n  edges[node] = [...neighbors.filter((n) => !walls.includes(n))];\r\n  return edges;\r\n};\r\n\r\nexport { generateGraph, removeEdge, restoreEdge };\r\n","/*\r\n    graphData: {\r\n      vertices: [],\r\n      edges: [],\r\n      data: {},\r\n      parentDict: {},\r\n      visited: [],\r\n      queue: [],\r\n      goal: -1,\r\n      running: false,\r\n    },\r\n    solveSpeed: 200,\r\n    wall: [],\r\n    start: 128,\r\n    end: -1,\r\n    algorithms: {\r\n      solve: getSolverNames()[0],\r\n      generate: undefined,\r\n      solveArr: getSolverNames(),\r\n    },\r\n  },\r\n*/\r\n\r\nimport { solvers, generators } from \"../../AlgorithmManager\";\r\nimport { removeEdge, restoreEdge } from \"../../GraphLogic\";\r\nexport default {\r\n  step: (state) => {\r\n    if (state.paused) return;\r\n    if (state.graphData.queue.length === 0) state.graphData.running = false;\r\n    //draw path at the end\r\n    if (state.graphData.drawPath) {\r\n      if (state.graphData.queue.length > 0) {\r\n        let pathTile = state.graphData.queue.pop();\r\n        if (state.graphData.data[pathTile].type === \"visited\") state.graphData.data[pathTile].type = \"path\";\r\n      }\r\n      return;\r\n    }\r\n    ///////////////////////\r\n    let f = solvers[state.algorithms.solve];\r\n    let res = f(state.graphData);\r\n\r\n    if (!res.running) res = { ...res, running: true, drawPath: true };\r\n    state.graphData = { ...state.graphData, ...res };\r\n    // when search is finished//////////\r\n    if (res.drawPath) {\r\n      state.graphData.queue = []; //empty it and it will be repurposed for the path\r\n      if (state.graphData.goal !== -1 && state.graphData.parentDict[state.graphData.goal] !== undefined) {\r\n        let current = state.graphData.goal;\r\n        while (state.graphData.parentDict[current] !== undefined) {\r\n          state.graphData.queue = [...state.graphData.queue, current];\r\n          current = state.graphData.parentDict[current];\r\n        }\r\n      }\r\n    }\r\n    /////////////////////\r\n    //change each cell type to visited if visited (duplication will not affect performance)\r\n    state.graphData.visited.forEach((v) => {\r\n      if (state.graphData.data[v].type === \"\") state.graphData.data[v].type = \"visited\";\r\n    });\r\n  },\r\n\r\n  placeStart: (state, action) => {\r\n    let id = action.payload;\r\n    let oldVal = state.graphData.data[id];\r\n    state.graphData.start = id;\r\n    state.graphData.data[id] = { ...oldVal, type: \"start\" };\r\n  },\r\n\r\n  placeEnd: (state, action) => {\r\n    let id = action.payload;\r\n    let oldVal = state.graphData.data[id];\r\n    state.GraphData.goal = id;\r\n    state.graphData.data[id] = { ...oldVal, type: \"end\" };\r\n  },\r\n  placeNode: (state, action) => {\r\n    let { type, id } = action.payload.id;\r\n    let oldVal = state.graphData.data[id];\r\n    state[type] = id;\r\n    state.graphData.data[id] = { ...oldVal, type };\r\n  },\r\n\r\n  solve: (state) => {\r\n    state.graphData.running = true;\r\n  },\r\n  setTimeoutId: (state, action) => {\r\n    state.timeoutId = action.payload;\r\n  },\r\n  pause: (state) => {\r\n    state.paused = true;\r\n  },\r\n  reset: (state) => {\r\n    state.graphData.vertices.forEach((v) => {\r\n      let { type } = state.graphData.data[v];\r\n      if (type !== \"start\" && type !== \"end\" && type !== \"wall\")\r\n        state.graphData.data[v] = { ...state.graphData.data[v], type: \"\" };\r\n    });\r\n    state.graphData.running = false;\r\n    state.graphData.drawPath = false;\r\n    state.graphData.queue = [state.graphData.start];\r\n    state.graphData.visited = [];\r\n    state.graphData.parentDict = {};\r\n    state.paused = false;\r\n  },\r\n  resume: (state) => {\r\n    state.paused = false;\r\n  },\r\n  clear: (state) => {\r\n    state.graphData.vertices.forEach((v) => {\r\n      state.graphData.edges[v] = state.graphData.data[v].neighbors;\r\n      if (state.graphData.data[v].type !== \"start\" && state.graphData.data[v].type !== \"end\") state.graphData.data[v].type = \"\";\r\n    });\r\n  },\r\n  updateSpeed: (state, action) => {\r\n    state.solveSpeed = action.payload;\r\n  },\r\n  wallATile: (state, action) => {\r\n    let { type } = state.graphData.data[action.payload];\r\n    if (type != \"\") return;\r\n    state.wall.push(action.payload);\r\n    state.graphData.data[action.payload].type = \"wall\";\r\n    state.graphData.edges = { ...removeEdge(state.graphData.edges, action.payload) };\r\n  },\r\n\r\n  removeAWall: (state, action) => {\r\n    let { type, neighbors } = state.graphData.data[action.payload];\r\n    if (type !== \"wall\") return;\r\n    state.wall = state.wall.filter((v) => v !== action.payload);\r\n    state.graphData.data[action.payload].type = \"\";\r\n    state.graphData.edges = { ...restoreEdge(state.graphData.edges, neighbors, state.wall, action.payload) };\r\n  },\r\n\r\n  setAlgorithm: (state, action) => {\r\n    let { value, type } = action.payload;\r\n    let algorithmDict;\r\n    switch (type) {\r\n      case \"solve\":\r\n        algorithmDict = solvers;\r\n        break;\r\n      case \"generate\":\r\n        algorithmDict = generators;\r\n        break;\r\n    }\r\n    if (algorithmDict[value] !== undefined) state.algorithms[type] = value;\r\n  },\r\n\r\n  generateMaze: (state) => {\r\n    //TODO: make the generation step by step like the solving algorithms\r\n\r\n    let f = generators[state.algorithms.generate];\r\n    let walls = f(state.graphData);\r\n    walls.forEach((w) => {\r\n      state.graphData.data[w].type = \"wall\";\r\n      state.graphData.edges = { ...removeEdge(state.graphData.edges, w) };\r\n    });\r\n    state.walls = [...walls];\r\n  },\r\n\r\n  updateGraph: (state, action) => {\r\n    let { vertices, edges } = action.payload;\r\n    state.graphData.vertices = vertices;\r\n    let randomStart = Math.floor(Math.random() * vertices.length); //temp\r\n\r\n    state.graphData.start = randomStart;\r\n    state.graphData.data[randomStart] = { type: \"start\", neighbors: edges[randomStart] };\r\n    state.graphData.queue = [randomStart];\r\n    randomStart = Math.floor(Math.random() * vertices.length); //temp\r\n    state.graphData.goal = randomStart;\r\n    state.graphData.data[randomStart] = { type: \"end\", neighbors: edges[randomStart] };\r\n    state.graphData.goal = randomStart;\r\n    state.graphData.edges = edges;\r\n    vertices.forEach((v) => {\r\n      if (state.graphData.data[v] === undefined) state.graphData.data[v] = { type: \"\", neighbors: edges[v] };\r\n    });\r\n  },\r\n};\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getSolverNames, getMazeGenerators } from \"../AlgorithmManager\";\r\nimport graphReducer from \"./reducers/reducers\";\r\nexport const graphSlice = createSlice({\r\n  name: \"graph\",\r\n  initialState: {\r\n    graphData: {\r\n      vertices: [],\r\n      edges: [],\r\n      data: {},\r\n      parentDict: {},\r\n      visited: [],\r\n      queue: [],\r\n      drawPath: false,\r\n      goal: -1,\r\n      start: -1,\r\n      running: false,\r\n    },\r\n    solveSpeed: 200,\r\n    wall: [],\r\n    start: 128,\r\n    end: -1,\r\n    paused: false,\r\n    timeoutId: undefined,\r\n    algorithms: {\r\n      solve: getSolverNames()[0],\r\n      generate: getMazeGenerators()[0],\r\n      solveArr: getSolverNames(),\r\n    },\r\n  },\r\n  reducers: graphReducer,\r\n});\r\n\r\nexport const {\r\n  step,\r\n  solve,\r\n  reset,\r\n  pause,\r\n  resume,\r\n  clear,\r\n  wallATile,\r\n  generateMaze,\r\n  placeStart,\r\n  updateGraph,\r\n  removeAWall,\r\n  updateSpeed,\r\n  setTimeoutId,\r\n  setAlgorithm,\r\n} = graphSlice.actions;\r\n\r\nexport default graphSlice.reducer;\r\n","import React from \"react\";\r\nimport { FormControl, InputLabel, Select, Button, Slider, MenuItem } from \"@material-ui/core\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { solve, reset, step, setAlgorithm, setTimeoutId } from \"../../logic/redux/graphSlice\";\r\nimport { getSolverNames } from \"../../logic/AlgorithmManager\";\r\n\r\nconst getOptionsFromArray = (arr) => {\r\n  return arr.map((v) => (\r\n    <MenuItem key={v} value={v}>\r\n      {v}\r\n    </MenuItem>\r\n  ));\r\n};\r\n\r\nconst solveHelper = (dispatch, delay, runSolver, oldTimeout) => {\r\n  clearInterval(oldTimeout);\r\n  if (!runSolver) return;\r\n  let timeoutId = setInterval(() => {\r\n    dispatch(step());\r\n  }, delay);\r\n  return timeoutId;\r\n};\r\n\r\nconst SolveControl = (props) => {\r\n  const selectedSolver = useSelector((state) => state.graph.algorithms.solve);\r\n  const runSpeed = useSelector((state) => state.graph.solveSpeed);\r\n  const runSolver = useSelector((state) => state.graph.graphData.running);\r\n  const oldTimeout = useSelector(\r\n    (state) => state.graph.timeoutId,\r\n    () => true\r\n  );\r\n  const dispatch = useDispatch();\r\n  let timeoutId = solveHelper(dispatch, runSpeed, runSolver, oldTimeout);\r\n  dispatch(setTimeoutId(timeoutId));\r\n\r\n  return (\r\n    <div className=\"sub-section maze-solvers\">\r\n      <FormControl variant=\"outlined\">\r\n        <InputLabel>Solvers</InputLabel>\r\n        <Select\r\n          name=\"solvers\"\r\n          id=\"solvers\"\r\n          value={selectedSolver}\r\n          label=\"Solvers\"\r\n          onChange={(e) => {\r\n            dispatch(setAlgorithm({ value: e.target.value, type: \"solve\" }));\r\n          }}\r\n        >\r\n          {getOptionsFromArray(getSolverNames())}\r\n        </Select>\r\n      </FormControl>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={(e) => {\r\n          dispatch(reset());\r\n          dispatch(solve());\r\n        }}\r\n      >\r\n        Solve\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SolveControl;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getMazeGenerators } from \"../../logic/AlgorithmManager\";\r\nimport { Button, Select, MenuItem, FormControl, InputLabel } from \"@material-ui/core\";\r\nimport { setAlgorithm, generateMaze, clear } from \"../../logic/redux/graphSlice\";\r\nconst getOptionsFromArray = (arr) => {\r\n  return arr.map((v) => (\r\n    <MenuItem key={v} value={v}>\r\n      {v}\r\n    </MenuItem>\r\n  ));\r\n};\r\n\r\nexport default (props) => {\r\n  const currentGenerator = useSelector((state) => state.graph.algorithms.generate);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className=\"sub-section maze-generation\">\r\n      <FormControl variant=\"outlined\">\r\n        <InputLabel>Generators</InputLabel>\r\n        <Select\r\n          name=\"generators\"\r\n          id=\"generators\"\r\n          value={currentGenerator}\r\n          label=\"Generators\"\r\n          onChange={(e) => {\r\n            dispatch(setAlgorithm({ value: e.target.value, type: \"generate\" }));\r\n          }}\r\n        >\r\n          {getOptionsFromArray(getMazeGenerators())}\r\n        </Select>\r\n      </FormControl>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        onClick={(e) => {\r\n          dispatch(clear());\r\n          dispatch(generateMaze());\r\n        }}\r\n      >\r\n        Generate\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { getMazeGenerators, getSolverNames } from \"../../logic/AlgorithmManager\";\r\nimport { Button, Slider, Select, MenuItem, FormControl, InputLabel, Box } from \"@material-ui/core\";\r\nimport \"./TopMenu.css\";\r\nimport SolveControl from \"./SolveControl\";\r\nimport GeneratorControl from \"./GeneratorControl\";\r\n\r\nexport default (props) => {\r\n  return (\r\n    <div className=\"top-menu\">\r\n      <GeneratorControl />\r\n\r\n      <SolveControl />\r\n\r\n      <div className=\"sub-section\">\r\n        <div className=\"legend\">\r\n          <p>•Items description</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\nimport \"./Tile.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { wallATile, removeAWall } from \"../../logic/redux/graphSlice\";\r\nconst TILE = 25;\r\nconst getCurrentCSS = (type) => {\r\n  let cls = \"tile \";\r\n  switch (type) {\r\n    case \"start\":\r\n      return cls + \"tile-start\";\r\n    case \"end\":\r\n      return cls + \"tile-end\";\r\n    case \"visited\":\r\n      return cls + \"tile-visited\";\r\n    case \"current\":\r\n      return cls + \"tile-current\";\r\n    case \"path\":\r\n      return cls + \"tile-path\";\r\n    case \"wall\":\r\n      return cls + \"tile-wall\";\r\n    default:\r\n      return cls;\r\n  }\r\n};\r\nconst toggleWall = (dispatch, type, id) => {\r\n  switch (type) {\r\n    case \"\":\r\n      dispatch(wallATile(id));\r\n      break;\r\n    case \"wall\":\r\n      dispatch(removeAWall(id));\r\n      break;\r\n  }\r\n};\r\n\r\nconst Tile = (props) => {\r\n  const dispatch = useDispatch();\r\n  let cellState = useSelector((state) => state.graph.graphData.data[props.id]);\r\n  let styles = { width: TILE, height: TILE };\r\n  return (\r\n    <td\r\n      id={props.id}\r\n      key={props.id}\r\n      className={getCurrentCSS(cellState.type)}\r\n      style={styles}\r\n      onMouseEnter={(e) => {\r\n        if (e.buttons === 1) toggleWall(dispatch, cellState.type, props.id);\r\n      }}\r\n      onPointerDown={(e) => {\r\n        toggleWall(dispatch, cellState.type, props.id);\r\n      }}\r\n    ></td>\r\n  );\r\n};\r\n\r\nexport default Tile;\r\nexport { TILE };\r\n","import React, { Component } from \"react\";\r\nimport \"./GraphArea.css\";\r\nimport Tile, { TILE } from \"./Tile\";\r\nimport { connect } from \"react-redux\";\r\nimport { placeStart, updateGraph } from \"../../logic/redux/graphSlice\";\r\nimport { generateGraph } from \"../../logic/GraphLogic\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  let vertices = state.graph.graphData.vertices;\r\n  return { vertices };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    placeStart: (vertex) => dispatch(placeStart(vertex)),\r\n    updateGraph: (nx, ny) => {\r\n      updateGraph(generateGraph(nx, ny));\r\n    },\r\n  };\r\n};\r\n\r\nclass GraphArea extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { rows: 0, columns: 0 };\r\n  }\r\n  componentDidMount() {\r\n    this.updateSizes();\r\n  }\r\n\r\n  updateSizes = () => {\r\n    let graphArea = document.getElementById(\"graph-area2\");\r\n    let graphW = graphArea.clientWidth;\r\n    let graphH = graphArea.clientHeight;\r\n    // let l = Math.sqrt((graphW * graphH) / 1200);\r\n    let l = TILE + 2; //+2 for border\r\n    let columns = Math.floor(graphW / l);\r\n    let rows = Math.floor(graphH / l);\r\n    let tileW = graphW / columns - 2;\r\n    let tileH = graphH / rows - 2;\r\n    this.setState({ graphW, graphH, columns, rows, tileW, tileH });\r\n    this.props.onLoad(columns, rows);\r\n    this.props.updateGraph(columns, rows);\r\n  };\r\n\r\n  getTiles = () => {\r\n    let tiles = [];\r\n    this.props.vertices.forEach((v) => {});\r\n    for (let r = 0; r < Math.floor(this.props.vertices.length / this.state.columns); r++) {\r\n      let cells = [];\r\n      for (let c = 0; c < Math.floor(this.props.vertices.length / this.state.rows); c++) {\r\n        let id = this.state.columns * r + c;\r\n        cells.push(<Tile id={id} key={id} />);\r\n      }\r\n      tiles.push(<tr key={\"row-\" + r}>{cells}</tr>);\r\n    }\r\n    return tiles;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"graph-area\" id=\"graph-area2\">\r\n        <table>\r\n          <tbody>{this.getTiles()}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphArea);\r\n","import React, { Component } from \"react\";\r\nimport \"./ControlsMenu.css\";\r\nimport { Slider, Box, Button } from \"@material-ui/core\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateSpeed, pause, reset, clear, resume } from \"../../logic/redux/graphSlice\";\r\nexport default (props) => {\r\n  const dispatch = useDispatch();\r\n  const paused = useSelector((state) => state.graph.paused);\r\n  return (\r\n    <div className=\"controls-menu\">\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={(e) => {\r\n          if (paused) dispatch(resume());\r\n          else dispatch(pause());\r\n        }}\r\n      >\r\n        {paused ? \"Resume\" : \"Pause\"}\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={(e) => {\r\n          dispatch(reset());\r\n        }}\r\n      >\r\n        Reset\r\n      </Button>\r\n      <Button variant=\"contained\" onClick={(e) => dispatch(clear())}>\r\n        Clear\r\n      </Button>\r\n      <div>\r\n        <Slider\r\n          onChangeCommitted={(e, v) => dispatch(updateSpeed(1010 - v))} //TODO: remove hard coded values\r\n          defaultValue={750}\r\n          step={50}\r\n          min={500}\r\n          max={1000}\r\n          aria-labelledby=\"discrete-slider\"\r\n          marks\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\nimport TopMenu from \"./components/TopMenu/TopMenu\";\r\nimport \"./App.css\";\r\nimport GraphArea from \"./components/GraphArea/GraphArea\";\r\nimport { generateGraph } from \"./logic/GraphLogic\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateGraph } from \"./logic/redux/graphSlice\";\r\nimport ControlsMenu from \"./components/ControlsMenu/ControlsMenu\";\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className=\"App\">\r\n      <TopMenu />\r\n      <GraphArea onLoad={(nx, ny) => dispatch(updateGraph(generateGraph(nx, ny)))} />\r\n      <ControlsMenu />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport graphReducer from \"./graphSlice\";\r\nexport default configureStore({\r\n  reducer: {\r\n    graph: graphReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./logic/redux/store\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}