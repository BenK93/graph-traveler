{"version":3,"sources":["logic/maze/Random.js","logic/AlgorithmManager.js","logic/maze/Prim.js","logic/maze/DFS.js","logic/solvers/BFS.js","logic/solvers/DFS.js","logic/GraphLogic.js","logic/redux/reducers/reducers.js","logic/redux/graphSlice.js","components/TopMenu/SolveControl.js","components/TopMenu/GeneratorControl.js","components/GraphArea/Tile.js","components/LegendArea/Legend.js","components/ControlsMenu/ControlsMenu.js","components/TopMenu/TopMenu.js","components/GraphArea/GraphArea.js","App.js","logic/redux/store.js","index.js"],"names":["generators","graphData","generationData","start","goal","vertices","walls","firstRun","queue","running","extraParams","deltaWalls","deltaHoles","forEach","v","push","data","value","Math","floor","random","length","undefined","leftOuts","filter","n","neighbors","reduce","res","n2","includes","sort","a","b","l","pop","tmp","currentNode","nodeNeighbors","neighbor","secondNeighbor","cornerNeighbors","Random","DFS","filteredNeighbors","currentHead","shift","solvers","BFS","graphState","edges","visited","parentDict","tmpQueue","currentVertex","goalNode","indexOf","updatedQueue","getMazeGenerators","names","getSolverNames","generateGraph","nx","ny","r","c","id","removeEdge","e","node","restoreEdge","step","state","paused","drawPath","pathTile","type","f","algorithms","solve","current","placeStart","action","payload","oldVal","placeEnd","GraphData","placeNode","clean","generate","weighted","weightCheck","setIntervalId","intervalId","pause","reset","selectedTile","replace","setWeightCheck","resume","clear","updateSpeed","solveSpeed","selectTile","wallATile","removeAWall","toggleWall","setAlgorithm","algorithmDict","generateMaze","w","updateGraph","randomStart","Object","keys","newData","graphSlice","createSlice","name","initialState","end","solveArr","reducers","graphReducer","actions","SolveControl","props","selectedSolver","useSelector","graph","runSpeed","runSolver","oldTimeout","dispatch","useDispatch","delay","clearInterval","setInterval","solveHelper","className","FormControl","variant","InputLabel","Select","label","onChange","target","map","MenuItem","key","Button","color","startIcon","onClick","currentGenerator","isWeighted","runGenerator","generateHelper","FormControlLabel","control","Checkbox","checked","disabled","getCurrentCSS","cls","Tile","cellState","oldData","styles","width","height","style","onMouseEnter","buttons","onPointerDown","class","icon","Typography","gutterBottom","Slider","onChangeCommitted","defaultValue","min","max","aria-labelledby","valueLabelDisplay","valueLabelFormat","marks","GeneratorControl","GraphArea","updateSizes","graphArea","document","getElementById","graphW","clientWidth","graphH","clientHeight","columns","TILE","rows","tileW","tileH","setState","onLoad","getTiles","tiles","cells","this","onContextMenu","preventDefault","Component","connect","vertex","App","configureStore","reducer","middleware","getDefaultMiddleware","immutableCheck","serializableCheck","ReactDOM","render","StrictMode","store"],"mappings":"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","file":"static/js/main.3fb2f5c6.chunk.js","sourcesContent":["export default function (graphData, generationData) {\r\n  let { start, goal, vertices } = graphData;\r\n  let deltaWalls = [],\r\n    deltaHoles = [];\r\n  vertices.forEach((v) => {\r\n    if (Math.random() > 0.7 && v !== start && v !== goal) deltaWalls.push(v);\r\n  });\r\n  return { running: false, deltaHoles, deltaWalls, generationData };\r\n}\r\n","import BFS from \"./solvers/BFS\";\r\nimport DFS from \"./solvers/DFS\";\r\nimport Random from \"./maze/Random\";\r\nimport DFSGenerate from \"./maze/DFS\";\r\nimport Prim from \"./maze/Prim\";\r\n// import Recursive from \"./maze/Recursive\";\r\n\r\nconst generators = { \"Prim's\": Prim, Random, DFS: DFSGenerate };\r\n\r\nconst solvers = {\r\n  BFS,\r\n  DFS,\r\n};\r\n\r\nfunction getMazeGenerators() {\r\n  let names = [];\r\n  for (let n in generators) names.push(n);\r\n  return names;\r\n}\r\n\r\nfunction getSolverNames() {\r\n  let names = [];\r\n  for (let n in solvers) names.push(n);\r\n  return names;\r\n}\r\n\r\nexport { getMazeGenerators, getSolverNames, solvers, generators };\r\n","export default function (graphData, generationData) {\r\n  let { start, goal, vertices, walls } = graphData;\r\n  let { firstRun, queue, running, extraParams } = generationData;\r\n  let deltaWalls = [];\r\n  let deltaHoles = [];\r\n  if (firstRun) {\r\n    //Fill all the maze with walls\r\n    vertices.forEach((v) => {\r\n      if (v !== start && v !== goal) {\r\n        deltaWalls.push(v);\r\n        graphData.data[v].value = Math.floor(Math.random() * 100); //better than just selecting random queue\r\n      }\r\n    });\r\n    generationData.firstRun = false;\r\n    generationData.queue = [start]; //start from the start\r\n  } else {\r\n    if (queue.length === 0) {\r\n      if (extraParams.leftOuts === undefined) {\r\n        let leftOuts = walls.filter((n) => graphData.data[n].neighbors.reduce((res, n2) => res && walls.includes(n2), true));\r\n        leftOuts.sort((a, b) => graphData.data[a].value - graphData.data[b].value);\r\n        extraParams = { leftOuts };\r\n      }\r\n      // add the unreachable walls with an extra hole\r\n      let { leftOuts } = extraParams;\r\n      if (leftOuts !== undefined && leftOuts.length !== 0) {\r\n        let l = leftOuts.pop();\r\n        queue.push(l);\r\n        let tmp = graphData.data[l].neighbors.filter((n) => walls.includes(n) && !queue.includes(n)); //possible extra holes\r\n        if (tmp.length > 0) queue.push(tmp[Math.floor(Math.random() * tmp.length)]);\r\n        extraParams = { leftOuts };\r\n      } else return { running: false, deltaWalls: [], deltaHoles: [], generationData };\r\n    }\r\n    let currentNode = queue.pop();\r\n    let nodeNeighbors = graphData.data[currentNode].neighbors;\r\n    //filter out\r\n    nodeNeighbors = nodeNeighbors.filter((neighbor) => !queue.includes(neighbor) && walls.includes(neighbor));\r\n    nodeNeighbors = nodeNeighbors.filter((neighbor) =>\r\n      graphData.data[neighbor].neighbors.reduce((res, secondNeighbor) => {\r\n        if (secondNeighbor === goal) return true;\r\n        if (secondNeighbor === currentNode) return res; //skip the father node\r\n        if (queue.includes(secondNeighbor) || !walls.includes(secondNeighbor)) return false; //if it has a neighbor who is in queue or a wall - don't add it\r\n        let cornerNeighbors = graphData.data[secondNeighbor].cornerNeighbors;\r\n        let filteredCorners = cornerNeighbors.filter((n) => !walls.includes(n));\r\n        if (filteredCorners.length > 1) return false;\r\n        return res;\r\n      }, true)\r\n    );\r\n    //\r\n    //add to queue\r\n    generationData.queue = [...queue.filter((n) => n !== currentNode), ...nodeNeighbors];\r\n    generationData.queue.sort((a, b) => graphData.data[a].value - graphData.data[b].value);\r\n\r\n    //make a hole\r\n    deltaHoles = [...deltaHoles, currentNode];\r\n  }\r\n  return { running, deltaHoles, deltaWalls, generationData, extraParams };\r\n}\r\n","export default function (graphData, generationData) {\r\n  let { start, goal, vertices, walls } = graphData;\r\n  let { firstRun, queue, running } = generationData;\r\n  let deltaWalls = [];\r\n  let deltaHoles = [];\r\n  if (firstRun) {\r\n    //first init on the first run\r\n    vertices.forEach((v) => {\r\n      if (v !== start && v !== goal) deltaWalls.push(v);\r\n    });\r\n    generationData.firstRun = false;\r\n    generationData.queue = [start];\r\n  } else {\r\n    let neighbors, filteredNeighbors, currentHead;\r\n    do {\r\n      //loop until you get valid queued cell\r\n\r\n      //at the end of the run, stop\r\n      if (queue.length === 0) return { running: false, deltaWalls: [], deltaHoles: [], generationData };\r\n\r\n      //get the last cell inserted\r\n      currentHead = queue.shift();\r\n      neighbors = graphData.data[currentHead].neighbors;\r\n      filteredNeighbors = neighbors.filter((n) => walls.includes(n));\r\n    } while (neighbors.length - filteredNeighbors.length > 1 && !neighbors.includes(goal));\r\n\r\n    neighbors.sort((a, b) => 0.75 - Math.random()); //randomize the DFS but not too much\r\n    queue = [...neighbors, ...queue.filter((n) => !neighbors.includes(n))];\r\n    deltaHoles = [...deltaHoles, currentHead];\r\n    generationData = { ...generationData, queue };\r\n  }\r\n  return { running, deltaHoles, deltaWalls, generationData };\r\n}\r\n","export default function BFS(graphState) {\r\n  let { edges, queue, visited, parentDict, running, goal } = graphState;\r\n  if (queue.length === 0) return graphState; // if no path\r\n  let tmpQueue = [...queue]; // every step will include all the level nodes\r\n  queue = [];\r\n  while (tmpQueue.length > 0) {\r\n    let currentVertex = tmpQueue.pop(); //get the next one (fifo)\r\n    // let currentVertex = queue.pop(); //get the next one (fifo)\r\n    let neighbors = edges[currentVertex];\r\n    neighbors = neighbors.filter((v) => !visited.includes(v) && !queue.includes(v));\r\n    neighbors.forEach((v) => (parentDict[v] = currentVertex));\r\n    queue = [...neighbors, ...queue];\r\n    visited.push(currentVertex);\r\n    if (neighbors.includes(goal)) {\r\n      let goalNode = neighbors[neighbors.indexOf(goal)];\r\n      parentDict[goalNode] = currentVertex;\r\n      running = false;\r\n    }\r\n  }\r\n  return { edges, queue, visited, parentDict, running, goal };\r\n}\r\n","export default function DFS(graphState) {\r\n  let { edges, queue, visited, parentDict, running, goal } = graphState;\r\n  if (queue.length === 0) return { ...graphState, running: false }; // if no path\r\n  let currentVertex = queue.shift(); //get the next one (lifo)\r\n  let neighbors = edges[currentVertex];\r\n  neighbors = neighbors.filter((v) => !visited.includes(v));\r\n  let updatedQueue = neighbors.filter((v) => queue.includes(v));\r\n  if (updatedQueue.length > 0) queue = queue.filter((v) => !updatedQueue.includes(v)); //make room for the updated nodes\r\n  neighbors.forEach((v) => (parentDict[v] = currentVertex));\r\n\r\n  queue = [...neighbors, ...queue];\r\n  visited.push(currentVertex);\r\n  if (neighbors.includes(goal)) {\r\n    let goalNode = neighbors[neighbors.indexOf(goal)];\r\n    parentDict[goalNode] = currentVertex;\r\n    running = false;\r\n  }\r\n  return { edges, queue, visited, parentDict, running, goal };\r\n}\r\n","function generateGraph(nx, ny) {\r\n  let vertices = [];\r\n  let edges = {};\r\n  for (let r = 0; r < ny; r++)\r\n    for (let c = 0; c < nx; c++) {\r\n      let id = nx * r + c;\r\n      vertices.push(id); //Add ID first\r\n      if (edges[id] === undefined) edges[id] = [];\r\n      if (id - 1 >= 0 && (id - 1) % nx <= id % nx) {\r\n        edges[id].push(id - 1);\r\n        edges[id - 1].push(id);\r\n      }\r\n      if (id - nx >= 0) {\r\n        edges[id].push(id - nx);\r\n        edges[id - nx].push(id);\r\n      }\r\n    }\r\n\r\n  return { vertices, edges };\r\n}\r\n\r\nconst removeEdge = (e, node) => {\r\n  let edges = { ...e };\r\n  let neighbors = edges[node];\r\n  neighbors.forEach((n) => {\r\n    edges[n] = edges[n].filter((v) => v !== node);\r\n  });\r\n  edges[node] = [];\r\n  return edges;\r\n};\r\n\r\nconst restoreEdge = (e, neighbors, walls, node) => {\r\n  let edges = { ...e };\r\n\r\n  neighbors.forEach((n) => {\r\n    if (!walls.includes(n)) edges[n] = [...edges[n], node];\r\n  });\r\n  edges[node] = [...neighbors.filter((n) => !walls.includes(n))];\r\n  return edges;\r\n};\r\n\r\nexport { generateGraph, removeEdge, restoreEdge };\r\n","/*\r\n    graphData: {\r\n      vertices: [],\r\n      edges: [],\r\n      data: {},\r\n      parentDict: {},\r\n      visited: [],\r\n      queue: [],\r\n      goal: -1,\r\n      running: false,\r\n    },\r\n    solveSpeed: 200,\r\n    wall: [],\r\n    start: 128,\r\n    end: -1,\r\n    algorithms: {\r\n      solve: getSolverNames()[0],\r\n      generate: undefined,\r\n      solveArr: getSolverNames(),\r\n    },\r\n  },\r\n*/\r\n\r\nimport { solvers, generators } from \"../../AlgorithmManager\";\r\nimport { removeEdge, restoreEdge } from \"../../GraphLogic\";\r\n// import { combineReducers } from \"redux\";\r\n\r\nexport default {\r\n  step: (state) => {\r\n    if (state.paused) return;\r\n    if (state.graphData.queue.length === 0) state.graphData.running = false;\r\n    //draw path at the end\r\n    if (state.graphData.drawPath) {\r\n      if (state.graphData.queue.length > 0) {\r\n        let pathTile = state.graphData.queue.pop();\r\n        if (state.graphData.data[pathTile].type === \"visited\") state.graphData.data[pathTile].type = \"path\";\r\n      }\r\n      return;\r\n    }\r\n    let f = solvers[state.algorithms.solve];\r\n    let res = f(state.graphData);\r\n\r\n    if (!res.running) res = { ...res, running: true, drawPath: true };\r\n    state.graphData = { ...state.graphData, ...res };\r\n    // when search is finished//////////\r\n    if (res.drawPath) {\r\n      state.graphData.queue = []; //empty it and it will be repurposed for the path\r\n      if (state.graphData.goal !== -1 && state.graphData.parentDict[state.graphData.goal] !== undefined) {\r\n        let current = state.graphData.goal;\r\n        while (state.graphData.parentDict[current] !== undefined) {\r\n          state.graphData.queue = [...state.graphData.queue, current];\r\n          current = state.graphData.parentDict[current];\r\n        }\r\n      }\r\n    }\r\n    /////////////////////\r\n    //change each cell type to visited if visited (duplication will not affect performance)\r\n    state.graphData.visited.forEach((v) => {\r\n      if (state.graphData.data[v].type === \"\") state.graphData.data[v].type = \"visited\";\r\n    });\r\n  },\r\n\r\n  placeStart: (state, action) => {\r\n    let id = action.payload;\r\n    let oldVal = state.graphData.data[id];\r\n    state.graphData.start = id;\r\n    state.graphData.data[id] = { ...oldVal, type: \"start\" };\r\n  },\r\n\r\n  placeEnd: (state, action) => {\r\n    let id = action.payload;\r\n    let oldVal = state.graphData.data[id];\r\n    state.GraphData.goal = id;\r\n    state.graphData.data[id] = { ...oldVal, type: \"end\" };\r\n  },\r\n  placeNode: (state, action) => {\r\n    let { type, id } = action.payload.id;\r\n    let oldVal = state.graphData.data[id];\r\n    state[type] = id;\r\n    state.graphData.data[id] = { ...oldVal, type };\r\n  },\r\n\r\n  solve: (state) => {\r\n    state.graphData.clean = false;\r\n    state.generationData.running = false;\r\n    state.graphData.running = true;\r\n  },\r\n  generate: (state, action) => {\r\n    state.generationData.weighted = action.payload;\r\n    state.weightCheck = action.payload;\r\n    state.graphData.clean = false;\r\n    state.generationData = {\r\n      ...state.generationData,\r\n      extraParams: {},\r\n      running: true,\r\n      firstRun: true,\r\n      queue: [state.graphData.start],\r\n    };\r\n  },\r\n  setIntervalId: (state, action) => {\r\n    let { type, value } = action.payload;\r\n    state.intervalId[type] = value;\r\n  },\r\n  pause: (state) => {\r\n    state.paused = true;\r\n  },\r\n  reset: (state) => {\r\n    if (state.selectedTile !== undefined) {\r\n      state.graphData.data[state.selectedTile].type = state.graphData.data[state.selectedTile].type.replace(\"-s\", \"\");\r\n      state.selectedTile = undefined;\r\n    }\r\n\r\n    if (!state.graphData.clean) {\r\n      state.graphData.vertices.forEach((v) => {\r\n        //Loop over visited & path\r\n        let { type } = state.graphData.data[v];\r\n        if (!state.generationData.weighted) state.graphData.data[v].value = 0;\r\n        if (type !== \"start\" && type !== \"end\" && type !== \"wall\")\r\n          state.graphData.data[v] = { ...state.graphData.data[v], type: \"\" };\r\n      });\r\n    }\r\n\r\n    state.graphData = {\r\n      ...state.graphData,\r\n      clean: true,\r\n      running: false,\r\n      drawPath: false,\r\n      queue: [state.graphData.start],\r\n      visited: [],\r\n      parentDict: {},\r\n    };\r\n    state.generationData = {\r\n      ...state.generationData,\r\n      running: false,\r\n      intervalId: undefined,\r\n      queue: [],\r\n      firstRun: true,\r\n      extraParams: {},\r\n    };\r\n    state.paused = false;\r\n  },\r\n  setWeightCheck: (state, action) => {\r\n    state.weightCheck = action.payload;\r\n  },\r\n\r\n  resume: (state) => {\r\n    state.paused = false;\r\n  },\r\n  clear: (state) => {\r\n    state.weightCheck = false;\r\n    state.generationData.weighted = false;\r\n    state.graphData.walls = [];\r\n    state.graphData.vertices.forEach((v) => {\r\n      state.graphData.edges[v] = state.graphData.data[v].neighbors;\r\n      state.graphData.data[v].value = -1;\r\n      if (state.graphData.data[v].type !== \"start\" && state.graphData.data[v].type !== \"end\") state.graphData.data[v].type = \"\";\r\n    });\r\n  },\r\n  updateSpeed: (state, action) => {\r\n    state.solveSpeed = action.payload;\r\n  },\r\n  selectTile: (state, action) => {\r\n    if (state.graphData.running || state.generationData.running) return;\r\n    let id = action.payload;\r\n    if (id === state.graphData.start) state.graphData.data[action.payload].type = \"start-s\";\r\n    else state.graphData.data[action.payload].type = \"end-s\";\r\n    state.selectedTile = id;\r\n  },\r\n  wallATile: (state, action) => {\r\n    let { type } = state.graphData.data[action.payload];\r\n    if (type !== \"\" || state.selectedTile !== undefined) return;\r\n\r\n    state.graphData.walls.push(action.payload);\r\n    state.graphData.data[action.payload].type = \"wall\";\r\n    state.graphData.edges = { ...removeEdge(state.graphData.edges, action.payload) };\r\n    state.graphData.clean = false;\r\n  },\r\n\r\n  removeAWall: (state, action) => {\r\n    let { type, neighbors } = state.graphData.data[action.payload];\r\n    if (type !== \"wall\" || state.selectedTile !== undefined) return;\r\n    state.graphData.walls = state.graphData.walls.filter((v) => v !== action.payload);\r\n    state.graphData.data[action.payload].type = \"\";\r\n    state.graphData.edges = { ...restoreEdge(state.graphData.edges, neighbors, state.graphData.walls, action.payload) };\r\n    if (state.graphData.walls.length === 0) state.graphData.clean = true;\r\n  },\r\n  toggleWall: (state, action) => {\r\n    let { type, neighbors } = state.graphData.data[action.payload];\r\n    let id = action.payload;\r\n    if (type === \"wall\") {\r\n      state.graphData.data[id].type = \"\";\r\n      state.graphData = {\r\n        ...state.graphData,\r\n        walls: state.graphData.walls.filter((v) => v !== id),\r\n        edges: { ...restoreEdge(state.graphData.edges, neighbors, state.graphData.walls, id) },\r\n      };\r\n      if (state.graphData.walls.length === 0) state.graphData.clean = true;\r\n      //\r\n      //\r\n    } else if (type !== \"start\" && type !== \"end\" && state.selectedTile === undefined) {\r\n      state.graphData.walls.push(id);\r\n      state.graphData = { ...state.graphData, clean: false, edges: { ...removeEdge(state.graphData.edges, id) } };\r\n      state.graphData.data[id].type = \"wall\";\r\n    }\r\n\r\n    if (state.selectedTile !== undefined) {\r\n      if (state.selectedTile === state.graphData.start) {\r\n        state.graphData.data[state.graphData.start].type = \"\";\r\n        state.graphData.data[id].type = \"start\";\r\n        state.graphData.start = id;\r\n      } else {\r\n        state.graphData.data[state.graphData.goal].type = \"\";\r\n        state.graphData.data[id].type = \"end\";\r\n        state.graphData.goal = id;\r\n      }\r\n      state.selectedTile = undefined;\r\n    }\r\n  },\r\n\r\n  setAlgorithm: (state, action) => {\r\n    let { value, type } = action.payload;\r\n    let algorithmDict;\r\n    switch (type) {\r\n      case \"solve\":\r\n        algorithmDict = solvers;\r\n        break;\r\n      default:\r\n        algorithmDict = generators;\r\n    }\r\n    if (algorithmDict[value] !== undefined) state.algorithms[type] = value;\r\n  },\r\n\r\n  generateMaze: (state, action) => {\r\n    if (state.paused) return;\r\n\r\n    let f = generators[state.algorithms.generate];\r\n    let { deltaWalls, deltaHoles, running, generationData, extraParams } = f(state.graphData, state.generationData);\r\n    state.graphData.walls = [...state.graphData.walls.filter((v) => !deltaHoles.includes(v)), ...deltaWalls];\r\n    deltaWalls.forEach((w) => {\r\n      if (w === state.graphData.start || w === state.graphData.goal) return;\r\n      state.graphData.data[w].type = \"wall\";\r\n      state.graphData.edges = { ...removeEdge(state.graphData.edges, w) };\r\n    });\r\n\r\n    deltaHoles.forEach((n) => {\r\n      if (n === state.graphData.start || n === state.graphData.goal) return;\r\n\r\n      state.graphData.data[n].type = \"\";\r\n      state.graphData.edges = {\r\n        ...restoreEdge(state.graphData.edges, state.graphData.data[n].neighbors, state.graphData.walls, n),\r\n      };\r\n    });\r\n    state.generationData = { ...generationData, running, extraParams };\r\n  },\r\n\r\n  updateGraph: (state, action) => {\r\n    //TODO: Optimize the code\r\n    let { vertices, edges } = action.payload;\r\n    state.graphData.vertices = vertices;\r\n    let randomStart = Math.floor(Math.random() * vertices.length); //TODO: clean this\r\n\r\n    state.graphData.start = randomStart;\r\n    state.graphData.data[randomStart] = { type: \"start\", neighbors: edges[randomStart], value: -1 };\r\n    state.graphData.queue = [randomStart];\r\n    randomStart = Math.floor(Math.random() * vertices.length); //temp\r\n    state.graphData.goal = randomStart;\r\n    state.graphData.data[randomStart] = { type: \"end\", neighbors: edges[randomStart], value: -1 };\r\n    state.graphData.goal = randomStart;\r\n    state.graphData.edges = edges;\r\n    vertices.forEach((v) => {\r\n      if (state.graphData.data[v] === undefined) state.graphData.data[v] = { type: \"\", neighbors: edges[v], value: -1 };\r\n    });\r\n    //new\r\n    vertices.forEach((v) => {\r\n      //get neighbors of neighbors\r\n      let cornerNeighbors = state.graphData.data[v].neighbors\r\n        .reduce((res, n) => [...res, ...state.graphData.data[n].neighbors], [])\r\n        .sort();\r\n\r\n      //count duplicates\r\n      cornerNeighbors = cornerNeighbors.reduce((res, n) => {\r\n        res[n] = (res[n] || 0) + 1;\r\n        return res;\r\n      }, {});\r\n\r\n      //map to array all 2 duplicates\r\n      cornerNeighbors = Object.keys(cornerNeighbors).reduce((res, n) => {\r\n        if (cornerNeighbors[n] === 2 && n != v) res = [...res, n * 1];\r\n        return res;\r\n      }, []);\r\n      let newData = { ...state.graphData.data[v], cornerNeighbors };\r\n      state.graphData.data[v] = newData;\r\n    });\r\n  },\r\n};\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getSolverNames, getMazeGenerators } from \"../AlgorithmManager\";\r\nimport graphReducer from \"./reducers/reducers\";\r\nexport const graphSlice = createSlice({\r\n  name: \"graph\",\r\n  initialState: {\r\n    selectedTile: undefined,\r\n    weightCheck: false,\r\n    graphData: {\r\n      clean: true,\r\n      vertices: [],\r\n      edges: [],\r\n      data: {},\r\n      parentDict: {},\r\n      visited: [],\r\n      queue: [],\r\n      drawPath: false,\r\n      goal: -1,\r\n      start: -1,\r\n      running: false,\r\n      walls: [],\r\n    },\r\n    generationData: {\r\n      weighted: false,\r\n      running: false,\r\n      intervalId: undefined,\r\n      queue: [],\r\n      firstRun: true,\r\n      extraParams: {},\r\n    },\r\n    solveSpeed: 60,\r\n    start: 128,\r\n    end: -1,\r\n\r\n    paused: false,\r\n    intervalId: {\r\n      solve: undefined,\r\n      generate: undefined,\r\n    },\r\n    algorithms: {\r\n      solve: getSolverNames()[0],\r\n      generate: getMazeGenerators()[0],\r\n      solveArr: getSolverNames(),\r\n    },\r\n  },\r\n  reducers: graphReducer,\r\n});\r\n\r\nexport const {\r\n  step,\r\n  solve,\r\n  generate,\r\n  reset,\r\n  pause,\r\n  resume,\r\n  clear,\r\n  wallATile,\r\n  generateMaze,\r\n  placeStart,\r\n  updateGraph,\r\n  removeAWall,\r\n  setWeightCheck,\r\n  updateSpeed,\r\n  setIntervalId,\r\n  setAlgorithm,\r\n  toggleWall,\r\n  selectTile,\r\n} = graphSlice.actions;\r\n\r\nexport default graphSlice.reducer;\r\n","import React from \"react\";\r\nimport { FormControl, InputLabel, Select, Button, MenuItem, FormControlLabel, Checkbox } from \"@material-ui/core\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { solve, reset, step, setAlgorithm, setIntervalId } from \"../../logic/redux/graphSlice\";\r\nimport { getSolverNames } from \"../../logic/AlgorithmManager\";\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\"\r\n\r\nconst getOptionsFromArray = (arr) => {\r\n  return arr.map((v) => (\r\n    <MenuItem key={v} value={v}>\r\n      {v}\r\n    </MenuItem>\r\n  ));\r\n};\r\n\r\nconst solveHelper = (dispatch, delay, runSolver, oldTimeout) => {\r\n  clearInterval(oldTimeout);\r\n  if (!runSolver) return;\r\n  let intervalId = setInterval(() => {\r\n    dispatch(step());\r\n  }, delay);\r\n  return intervalId;\r\n};\r\n\r\nconst SolveControl = (props) => {\r\n  const selectedSolver = useSelector((state) => state.graph.algorithms.solve);\r\n  const runSpeed = useSelector((state) => state.graph.solveSpeed);\r\n  const runSolver = useSelector((state) => state.graph.graphData.running);\r\n  const oldTimeout = useSelector(\r\n    (state) => state.graph.intervalId.solve,\r\n    () => true\r\n  );\r\n  const dispatch = useDispatch();\r\n  let intervalId = solveHelper(dispatch, runSpeed, runSolver, oldTimeout);\r\n  dispatch(setIntervalId({ type: \"solve\", value: intervalId }));\r\n\r\n  return (\r\n    <div className=\"sub-section maze-solvers\">\r\n      <FormControl variant=\"outlined\">\r\n        <InputLabel>Solvers</InputLabel>\r\n        <Select\r\n          name=\"solvers\"\r\n          id=\"solvers\"\r\n          value={selectedSolver}\r\n          label=\"Solvers\"\r\n          onChange={(e) => {\r\n            dispatch(setAlgorithm({ value: e.target.value, type: \"solve\" }));\r\n          }}\r\n        >\r\n          {getOptionsFromArray(getSolverNames())}\r\n        </Select>\r\n      </FormControl>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        // startIcon={<PlayArrowIcon/>}\r\n        startIcon={<SendIcon/>}\r\n        onClick={(e) => {\r\n          dispatch(reset());\r\n          dispatch(solve());\r\n        }}\r\n      >\r\n        Solve\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        startIcon={<RefreshIcon />}\r\n        onClick={(e) => {\r\n          dispatch(reset());\r\n        }}\r\n      >\r\n        Reset\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SolveControl;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getMazeGenerators } from \"../../logic/AlgorithmManager\";\r\nimport { Button, Select, MenuItem, FormControl, InputLabel, Box, Grid, Checkbox, FormControlLabel } from \"@material-ui/core\";\r\nimport { setAlgorithm, generateMaze, clear, generate, setIntervalId, reset, setWeightCheck } from \"../../logic/redux/graphSlice\";\r\nimport BuildIcon from \"@material-ui/icons/Build\";\r\nimport FitnessCenterIcon from \"@material-ui/icons/FitnessCenter\";\r\n\r\nconst getOptionsFromArray = (arr) => {\r\n  return arr.map((v) => (\r\n    <MenuItem key={v} value={v}>\r\n      {v}\r\n    </MenuItem>\r\n  ));\r\n};\r\n\r\nconst generateHelper = (dispatch, runGenerator, oldTimeout) => {\r\n  clearInterval(oldTimeout);\r\n  if (!runGenerator) return;\r\n  let intervalId = setInterval(() => {\r\n    dispatch(generateMaze());\r\n  }, 10);\r\n  return intervalId;\r\n};\r\n\r\nexport default (props) => {\r\n  const currentGenerator = useSelector((state) => state.graph.algorithms.generate);\r\n  const isWeighted = useSelector((state) => state.graph.weightCheck);\r\n  const runGenerator = useSelector((state) => state.graph.generationData.running);\r\n  const oldTimeout = useSelector(\r\n    (state) => state.graph.intervalId.generate,\r\n    () => true\r\n  );\r\n  const dispatch = useDispatch();\r\n  let intervalId = generateHelper(dispatch, runGenerator, oldTimeout);\r\n  dispatch(setIntervalId({ type: \"generate\", value: intervalId }));\r\n  return (\r\n    <div className=\"sub-section maze-generation\">\r\n      <FormControl variant=\"outlined\">\r\n        <InputLabel>Generators</InputLabel>\r\n        <Select\r\n          name=\"generators\"\r\n          id=\"generators\"\r\n          value={currentGenerator}\r\n          label=\"Generators\"\r\n          onChange={(e) => {\r\n            dispatch(setAlgorithm({ value: e.target.value, type: \"generate\" }));\r\n          }}\r\n        >\r\n          {getOptionsFromArray(getMazeGenerators())}\r\n        </Select>\r\n      </FormControl>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        startIcon={<BuildIcon />}\r\n        onClick={(e) => {\r\n          dispatch(reset());\r\n          dispatch(clear());\r\n          dispatch(generate(isWeighted));\r\n        }}\r\n      >\r\n        Generate\r\n      </Button>\r\n      <FormControlLabel\r\n        id=\"weight-checkbox\"\r\n        control={\r\n          <Checkbox\r\n            id=\"weight-checkbox\"\r\n            value=\"weight\"\r\n            checked={isWeighted}\r\n            disabled={runGenerator}\r\n            onChange={(e, state) => dispatch(setWeightCheck(state))}\r\n          />\r\n        }\r\n        label=\"weighted\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./Tile.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { wallATile, removeAWall, toggleWall, selectTile } from \"../../logic/redux/graphSlice\";\r\nconst TILE = 25;\r\nconst getCurrentCSS = (type) => {\r\n  let cls = \"tile \";\r\n  switch (type) {\r\n    case \"start\":\r\n      return cls + \"tile-start\";\r\n    case \"end\":\r\n      return cls + \"tile-end\";\r\n    case \"start-s\":\r\n      return cls + \"tile-start selected\";\r\n    case \"end-s\":\r\n      return cls + \"tile-end selected\";\r\n    case \"visited\":\r\n      return cls + \"tile-visited\";\r\n    case \"current\":\r\n      return cls + \"tile-current\";\r\n    case \"path\":\r\n      return cls + \"tile-path\";\r\n    case \"wall\":\r\n      return cls + \"tile-wall\";\r\n    default:\r\n      return cls;\r\n  }\r\n};\r\n// const toggleWall = (dispatch, type, id) => {\r\n//   switch (type) {\r\n//     case \"wall\":\r\n//       dispatch(removeAWall(id));\r\n//       break;\r\n//     default:\r\n//       dispatch(wallATile(id));\r\n//   }\r\n// };\r\n\r\nconst Tile = (props) => {\r\n  const dispatch = useDispatch();\r\n  let cellState = useSelector(\r\n    (state) => state.graph.graphData.data[props.id],\r\n    (oldData, newData) => oldData.type === newData.type && oldData.value === newData.value\r\n  );\r\n  let weighted = useSelector(\r\n    (state) => state.graph.generationData.weighted,\r\n    () => true\r\n  );\r\n  let styles = { width: TILE, height: TILE };\r\n  return (\r\n    <td\r\n      id={props.id}\r\n      key={props.id}\r\n      className={getCurrentCSS(cellState.type)}\r\n      style={styles}\r\n      onMouseEnter={(e) => {\r\n        if (e.buttons === 1) dispatch(toggleWall(props.id));\r\n      }}\r\n      onPointerDown={(e) => {\r\n        if (cellState.type === \"start\" || cellState.type === \"end\") dispatch(selectTile(props.id));\r\n        else dispatch(toggleWall(props.id));\r\n      }}\r\n    >\r\n      {weighted && (cellState.type === \"\" || cellState.type === \"visited\") && cellState.value !== -1\r\n        ? cellState.value\r\n        : undefined}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default Tile;\r\nexport { TILE };\r\n","import React from \"react\";\r\nimport \"./Legend.css\";\r\nimport { TILE } from \"../GraphArea/Tile\";\r\n\r\nexport default function () {\r\n  return (\r\n    <div class=\"legend-wrapper\">\r\n      <ul className=\"sub-section legend\">\r\n        <li>\r\n          <p>Start</p>\r\n          <div style={{ width: TILE, height: TILE }} className=\"tile-start\"></div>\r\n        </li>\r\n        <li>\r\n          <p>Goal</p>\r\n          <div style={{ width: TILE, height: TILE }} className=\"tile-end\"></div>\r\n        </li>\r\n        <li>\r\n          <p>Wall</p>\r\n          <div style={{ width: TILE, height: TILE }} className=\"tile-wall\"></div>\r\n        </li>\r\n        {/* <li> */}\r\n        {/* <p>Path</p> */}\r\n        {/* <div style={{ width: TILE, height: TILE }} className=\"tile-path\"></div> */}\r\n        {/* </li> */}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./ControlsMenu.css\";\r\nimport { Slider, Button, Typography, Grid, FormControlLabel, Checkbox } from \"@material-ui/core\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateSpeed, pause, reset, clear, resume } from \"../../logic/redux/graphSlice\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport PauseIcon from \"@material-ui/icons/Pause\";\r\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nexport default (props) => {\r\n  const dispatch = useDispatch();\r\n  const paused = useSelector((state) => state.graph.paused);\r\n  const solveSpeed = useSelector((state) => state.graph.solveSpeed);\r\n\r\n  let icon = paused ? <PlayArrowIcon /> : <PauseIcon />;\r\n\r\n  return (\r\n    <div className=\"sub-section controls-menu\">\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        startIcon={icon}\r\n        onClick={(e) => {\r\n          if (paused) dispatch(resume());\r\n          else dispatch(pause());\r\n        }}\r\n      >\r\n        {paused ? \"Resume\" : \"Pause\"}\r\n      </Button>\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        startIcon={<DeleteIcon />}\r\n        color=\"secondary\"\r\n        onClick={(e) => {\r\n          dispatch(reset());\r\n          dispatch(clear());\r\n        }}\r\n      >\r\n        Clear\r\n      </Button>\r\n      <div>\r\n        <Typography gutterBottom>Solve Speed</Typography>\r\n        <Slider\r\n          onChangeCommitted={(e, v) => dispatch(updateSpeed(1010 - v))} //TODO: remove hard coded values\r\n          defaultValue={1010 - solveSpeed}\r\n          step={50}\r\n          min={500}\r\n          max={1000}\r\n          aria-labelledby=\"discrete-slider\"\r\n          valueLabelDisplay=\"auto\"\r\n          valueLabelFormat={(v) => 1010 - v}\r\n          marks\r\n        />\r\n      </div>\r\n      <FormControlLabel className=\"skip-control\" control={<Checkbox value=\"skip\" />} label=\"skip animation\" />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./TopMenu.css\";\r\nimport SolveControl from \"./SolveControl\";\r\nimport GeneratorControl from \"./GeneratorControl\";\r\nimport { TILE } from \"../GraphArea/Tile\";\r\nimport Legend from \"../LegendArea/Legend\";\r\nimport ControlsMenu from \"../ControlsMenu/ControlsMenu\";\r\nexport default (props) => {\r\n  return (\r\n    <div className=\"top-menu\">\r\n      <GeneratorControl />\r\n\r\n      <SolveControl />\r\n      <ControlsMenu/>\r\n      </div>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\nimport \"./GraphArea.css\";\r\nimport Tile, { TILE } from \"./Tile\";\r\nimport { connect } from \"react-redux\";\r\nimport { placeStart, updateGraph } from \"../../logic/redux/graphSlice\";\r\nimport { generateGraph } from \"../../logic/GraphLogic\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  let vertices = state.graph.graphData.vertices;\r\n  return { vertices };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    placeStart: (vertex) => dispatch(placeStart(vertex)),\r\n    updateGraph: (nx, ny) => {\r\n      updateGraph(generateGraph(nx, ny));\r\n    },\r\n  };\r\n};\r\n\r\nclass GraphArea extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { rows: 0, columns: 0 };\r\n  }\r\n  componentDidMount() {\r\n    this.updateSizes();\r\n  }\r\n\r\n  updateSizes = () => {\r\n    let graphArea = document.getElementById(\"graph-area2\");\r\n    let graphW = graphArea.clientWidth;\r\n    let graphH = graphArea.clientHeight;\r\n    // let l = Math.sqrt((graphW * graphH) / 1200);\r\n    let l = TILE + 2; //+2 for border\r\n    let columns = Math.floor(graphW / l);\r\n    let rows = Math.floor(graphH / l);\r\n    let tileW = graphW / columns - 2;\r\n    let tileH = graphH / rows - 2;\r\n    this.setState({ graphW, graphH, columns, rows, tileW, tileH });\r\n    this.props.onLoad(columns, rows);\r\n    this.props.updateGraph(columns, rows);\r\n  };\r\n\r\n  getTiles = () => {\r\n    let tiles = [];\r\n    this.props.vertices.forEach((v) => {});\r\n    for (let r = 0; r < Math.floor(this.props.vertices.length / this.state.columns); r++) {\r\n      let cells = [];\r\n      for (let c = 0; c < Math.floor(this.props.vertices.length / this.state.rows); c++) {\r\n        let id = this.state.columns * r + c;\r\n        cells.push(<Tile id={id} key={id} />);\r\n      }\r\n      tiles.push(<tr key={\"row-\" + r}>{cells}</tr>);\r\n    }\r\n    return tiles;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"graph-area\" id=\"graph-area2\" onContextMenu={(e) => e.preventDefault()}>\r\n        <table>\r\n          <tbody>{this.getTiles()}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphArea);\r\n","import React from \"react\";\r\nimport TopMenu from \"./components/TopMenu/TopMenu\";\r\nimport \"./App.css\";\r\nimport GraphArea from \"./components/GraphArea/GraphArea\";\r\nimport { generateGraph } from \"./logic/GraphLogic\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateGraph } from \"./logic/redux/graphSlice\";\r\nimport ControlsMenu from \"./components/ControlsMenu/ControlsMenu\";\r\nimport Legend from \"./components/LegendArea/Legend\";\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className=\"App\">\r\n      <TopMenu />\r\n      <GraphArea onLoad={(nx, ny) => dispatch(updateGraph(generateGraph(nx, ny)))} />\r\n      <Legend />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport graphReducer from \"./graphSlice\";\r\nexport default configureStore({\r\n  reducer: {\r\n    graph: graphReducer,\r\n    middleware:getDefaultMiddleware({immutableCheck:false,serializableCheck:false})\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./logic/redux/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}